<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Grid.Mvc</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Mvc.Grid.WebServiceParams">
            <summary>
            Class used for rendering the grid parameters from web service
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.PagingParams">
            <summary>
            Class used for Handling Paging using custom logic
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PagingParams.exportOption">
            <summary>
            Gets or sets <b>ConvertOptions</b> for export
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.PagingParams.PageSize">
            <summary>
            Gets or sets <b>PageSize</b>
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.PagingParams.StartIndex">
            <summary>
            Gets or sets <b>StartIndex</b> of the requested page
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.PagingParams.RequestType">
            <summary>
            Gets or sets <b>RequestType</b>  1-Paging, 2 - sorting
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.PagingParams.IsGrouped">
            <summary>
            Gets or sets <b>IsGrouped</b> the collection grouping behaviour
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.PagingParams.SortDescriptors">
            <summary>
            Gets or sets <b>SortedColumn</b> the collection of sorted Column and their directions
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.PagingParams.FilterDescriptors">
            <summary>
            Gets or sets <b>FilterConditions</b> the collection of filter conditions
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.PagingParams.SearchDescriptors">
            <summary>
            Gets or sets <b>SearchConditions</b> the collection of search conditions
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.PagingParams.EnableOnDemand">
            <summary>
            Gets or sets<b>EnableOnDemand</b> of the Grid Control
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridActionResultBase`1.clientObject">
            <summary>
            client object holds the all neccessary properties
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridActionResultBase`1.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            All the values from call back are accessed in this method. All the Operations
            request performed from here.
            </summary>
            <remarks>
            Asyncronous requests from the client side is handled here.
            <para></para>
            <para>Required operations are performed according to the request.</para>
            </remarks>
            <param name="context">context encapsulates the information about Http
            Request</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.GridActionResultBase`1.PersistEssentialsAtPost" -->
        <member name="P:Syncfusion.Mvc.Grid.GridActionResultBase`1.RequestArgs">
            <summary>
            Gets or sets the values related with the current request
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridActionResultBase`1.GridObject">
            <summary>
            Gets or sets MvcGrid Object
            </summary>       
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridActionResultBase`1.GridModel">
            <summary>
            Gets the Grid Model object
            </summary>
            <remarks>
            GridModel Object contains all properties and events of the Grid control.
            </remarks>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridActionResultBase`1.GridAction">
            <summary>
            Gets the GridAction object
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridAction`1.MaxJsonDataLength">
            <summary>
            Stores the maximum length for jsondata to serialize
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridAction`1.JsonSerializer">
            <summary>
            used to serialize the response 
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridAction`1.clientObject">
            <summary>
            client object holds the all neccessary properties
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.GridAction`1.PersistEssentialsAtPost" -->
        <member name="M:Syncfusion.Mvc.Grid.GridAction`1.ToStringArray(System.Object[])">
            <summary>
            Converts the array of objects to array of strings.
            </summary>
            <param name="values">array of objects</param>
            <returns>string array</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridAction`1.GridCommandsBinding(System.Object,Syncfusion.Mvc.Grid.GridColumn{`0})">
            <summary>
            Grids the commands binding.
            </summary>
            <param name="obj">The obj.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridAction`1.PropertyMapping(System.String,System.Object,Syncfusion.Mvc.Grid.GridCommands{`0})">
            <summary>
            Properties mapping for GridCommands.
            </summary>
            <param name="key">The key.</param>
            <param name="Value">The value.</param>
            <param name="commands">The commands.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridAction`1.StackedRowsBinding(System.Object)">
            <summary>
            Stackeds the rows binding.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridAction`1.PropertyMapping(System.String,System.Object,Syncfusion.Mvc.Grid.GridStackedRows{`0})">
            <summary>
            Properties the mapping.
            </summary>
            <param name="key">The key.</param>
            <param name="Value">The value.</param>
            <param name="rows">The rows.</param>
            <returns>StackedRows</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridAction`1.StackedColumnBinding(System.Object,Syncfusion.Mvc.Grid.GridStackedRows{`0})">
            <summary>
            Stackeds the column binding.
            </summary>
            <param name="obj">The obj.</param>
            <param name="rows">The rows.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridAction`1.PropertyMapping(System.String,System.Object,Syncfusion.Mvc.Grid.GridStackedColumns{`0})">
            <summary>
            Properties the mapping.
            </summary>
            <param name="key">The key.</param>
            <param name="Value">The value.</param>
            <param name="column">The column.</param>
            <returns>StackedColumns</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridAction`1.NestedColumnBinding(System.Object,Syncfusion.Mvc.Grid.GridStackedColumns{`0})">
            <summary>
            Nesteds the column binding.
            </summary>
            <param name="obj">The obj.</param>
            <param name="NestedColumn">The nested column.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridAction`1.NestedPropertyMapping(System.String,System.Object,Syncfusion.Mvc.Grid.GridStackedColumns{`0})">
            <summary>
            Nesteds the property mapping.
            </summary>
            <param name="key">The key.</param>
            <param name="Value">The value.</param>
            <param name="column">The column.</param>
            <returns>NestedStackedColumn</returns>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridAction`1.RequestArgs">
            <summary>
            Gets or sets the values related with the current request
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridAction`1.GridObject">
            <summary>
            Gets or sets MvcGrid Object
            </summary>       
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridAction`1.GridActionResultBase">
            <summary>
            Gets or sets MvcGrid Object
            </summary>       
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridAction`1.GridModel">
            <summary>
            Gets the Grid Model object
            </summary>
            <remarks>
            GridModel Object contains all properties and events of the Grid control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridHtmlActionResult`1.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Used to write the result in the context
            </summary>
            <remarks>
            Used to Write the result in Httpcontext during the callbacks.
            </remarks>
            <param name="context">context encapsulates the information about Http
            Request</param>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridJSONActionResult`1.MaxJsonDataLength">
            <summary>
            Stores the maximum length for jsondata to serialize
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridJSONActionResult`1.JsonSerializer">
            <summary>
            used to serialize the response 
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridJSONActionResult`1.JsonTemplateWithoutGrouping">
            <summary>
            Serializes the  Data source into JSON format
            </summary>
            <remarks>
            Serializes the  Data source into JSON format.
            </remarks>
            <param name="context">context encapsulates the information about Http
            Request</param>
            
        </member>
        <member name="T:Syncfusion.Mvc.Grid.CssClass">
            <summary>
            Contains all CssClass Names 
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.GridHeaderCss">
            <summary>
            Contains the GridHeader Class Name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.EnableRowHover">
            <summary>
            Contains RowHovering class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.HeaderCellCss">
            <summary>
            Contains HeaderCellCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.GroupHeaderCellCss">
            <summary>
            Contains HeaderCellCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.MasterHeaderCellCss">
            <summary>
            Contains HeaderCellCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.HeaderCellDivCss">
            <summary>
            Contains HeaderCellDivCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.RowHeaderCellCss">
            <summary>
            Contains RowHeaderCellCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.AlternateRecord">
            <summary>
            Contains Alternate Row class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.TopLeftCellCss">
            <summary>
            Contains TopLeftCellCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.EditCellCss">
            <summary>
            Inline edit cell css
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.InlineEditForm">
            <summary>
            Inline-form edit mode form css
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.TopRightCellCss">
            <summary>
            Contains TopRightCellCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.CaptionRow">
            <summary>
            Contains GroupCaption class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.PagerCaptionRow">
            <summary>
            Contains GroupCaption class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.GroupCaption">
            <summary>
            Contains GroupCaption class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.RecordPlusCollapse">
            <summary>
            Contains  RecordPlusCollapse class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.ExpandIcon">
            <summary>
            Contains ExpandIcon class Name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.CollapseIcon">
            <summary>
            Contains CollapseIcon class Name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.RowCellCss">
            <summary>
            Contains RowCellCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.EmptyCellCss">
            <summary>
            Contains RowCellCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.RowCellHiddenCss">
            <summary>
            Contains RowCellHiddenCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.RecordPlusExpandCss">
            <summary>
            Contains RecordPlusExpandCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.TableCss">
            <summary>
            Contains TableCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.AutoWrap">
            <summary>
            Contains AutoWrap css class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.SummaryCss">
            <summary>
            Contains SummaryCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.AnySummaryCss">
            <summary>
            Contains SummaryCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.WaitingPopupCss">
            <summary>
            Contains WaitingPopupCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.IndentCellCss">
            <summary>
            Contains indentCellCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.MasterCellExpandCss">
            <summary>
            Contains indentCellCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.MasterCellCollapseCss">
            <summary>
            Contains indentCellCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.NestedTableCellCss">
            <summary>
            Contains NestedTableCellCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.TemplateCellCss">
            <summary>
            Contains  TemplateCellCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.UnboundCellCss">
            <summary>
            Contains  UnboundCellCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.UnboundButtonCss">
            <summary>
            Contains  UnboundButtonCss class name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.ToolbarItemCss">
            <summary>
            Contains Toolbar items class Name
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.EditCellCaption">
            <summary>
            Contains Edit form CaptionCell
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.FilterIcon">
            <summary>
            Contains Filter icons for filtermode
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.Dropdownfilter">
            <summary>
            Contains Dropdown filter css
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.FilterButton">
            <summary>
            Contains filterbutton css
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.CustomFilterDropdown">
            <summary>
            Custom filter dropdown css
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.InlineFormRecordCaption">
            <summary>
            Inline form lable css
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CssClass.InlineFormCell">
            <summary>
            Inline form Cell css
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.GridScript">
            <summary>
            Stores MvcScript namespace   
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.GridCombinedScript">
            <summary>
            Stores MvcScript namespace   
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ColumnDragnDropScript">
            <summary>
            Stores colDnDScript namesapce
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.FilteringScript">
            <summary>
            Stores colDnDScript namesapce
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.EventArgsScript">
            <summary>
            Stores colDnDScript namesapce
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ScrollbarScript">
            <summary>
            Stores Scrollbar script
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ColResizingScript">
            <summary>
            Stores colResizingScript namesapce
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.PagerScriptConst">
            <summary>
            Stores pagerScript namesapce
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.GridJsonModeScript">
            <summary>
            Stores pagerScript namesapce
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.GridLocalizationScript">
            <summary>
            Stores pagerScript namesapce
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.KeyConfigScript">
            <summary>
            Stores pagerScript namesapce
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.SelectionMgrScript">
            <summary>
            Stores selectionMgrScript namesapce
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.SkinPrefix">
            <summary>
            Stores the skin prefix
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.FilterMode">
            <summary>
            Stores FilterMode
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.PageSize">
            <summary>
            Page Size Constant
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.PageCount">
            <summary>
            PageCount Constant
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.PagerStyle">
            <summary>
            Pager Style Constant
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.PagerPosition">
            <summary>
            Pager position Constant
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.SliderWidth">
            <summary>
            Width of the slider
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.TextboxWidth">
            <summary>
            Width of the textbox in manual pager
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ShowRecordPlusMinus">
            <summary>
            Stores "ShowRecordPlusMinus" 
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ShowRowHeader">
            <summary>
            Stores "ShowRowHeader"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.EnableLegacySettings">
            <summary>
            Stores "EnableLegacySettings"
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Mvc.Grid.GridUtils.ShowStackedHeader" -->
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.WebService">
            <summary>
            Stores "WebService" url.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.TotalRecordsCountConst">
            <summary>
            Stores "TotalRecordsCount"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.JsonModeExpandMapper">
            <summary>
            Stores "JsonModePagingSortingMapper"   
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.MergeCells">
            <summary>
            Stores Cells Range
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowMergeCells">
            <summary>
            The allow merge cells
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ServerModeActionMapper">
            <summary>
            Stores "ServerMode Paging/sorting/grouping/filtering action Mapper"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ColumnsCollection">
            <summary>
            Stores "columns"  
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.VisibleColumnsCollection">
            <summary>
            Stores "visiblecolumns"  
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.StackedRowCollection">
            <summary>
            Stores "StackedRows"  
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ActionMode">
            <summary>
            Stores "ActionMode"  
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ItemTemplate">
            <summary>
            Stores "ItemTemplate"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowDragAndDrop">
            <summary>
            Stores "AllowDragnDrop"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowEditing">
            <summary>
            Stores "AllowEditing"   
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowDeleting">
            <summary>
            Stores "AllowDeleting"   
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ResizeSettings">
            <summary>
            Stores "ResizeSettings(ResizeToFit and ClipContent)"    
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowPaging">
            <summary>
            Stores "AllowPaging"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowResizing">
            <summary>
            Stores "AllowResizing"
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Mvc.Grid.GridUtils.AllowAutoWrap" -->
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowSelection">
            <summary>
            Stores "AllowSelection"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.EnableRowHover">
            <summary>
            Stores "AllowSelection"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowSorting">
            <summary>
            Stores "AllowSorting"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowMultiSorting">
            <summary>
            Stores "AllowMultiSorting"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowGrouping">
            <summary>
            Stores "AllowGrouping"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ShowGroupDropArea">
            <summary>
            Stores "ShowGroupDropArea"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.IsExpanded">
            <summary>
            Stores "IsExpanded"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowSummaries">
            <summary>
            Stores "AllowSummaries"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowFiltering">
            <summary>
            Stores "AllowFiltering"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowFormatFiltering">
            <summary>
            Stores "AllowFormatFiltering"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowCaseSensitive">
            <summary>
            Stores "AllowCaseSensitive"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowFormatGrouping">
            <summary>
            Stores "AllowFormatFiltering"
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Mvc.Grid.GridUtils.AllowSearching" -->
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AxpandAllGroups">
            <summary>
            Stores "ExpandAllGroups"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ShowCaption">
            <summary>
            Stores "ShowCaption"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.SkinName">
            <summary>
            Stores "SkinName"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.PrimaryKeycolumns">
            <summary>
            Stores "primaryKeys"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.CellTypeCollection">
            <summary>
            Stores "CellTypeCollection"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.DisplayName">
            <summary>
            Stores "HeaderText"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.Caption">
            <summary>
            Stores "Caption"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.CaptionText">
            <summary>
            Stores "CaptionText"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.GroupedColumns">
            <summary>
            Stores "GroupedColumns"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.SortedColumn">
            <summary>
            Stores "SortedColumns"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.CurrentIndex">
            <summary>
            Stores "CurrentIndex"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.CurrentPage">
            <summary>
            Stores "CurrentPage"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.TemplateColumns">
            <summary>
            Stores "TemplateColumns"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ClientObject">
            <summary>
            Stores "ClientObject"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.RequestType">
            <summary>
            Stores "RequestType"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.SortedColumns">
            <summary>
            Stores "SortColumn"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.SortDirection">
            <summary>
            Stores "SortDirection"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.StartIndex">
            <summary>
            Stores "StartIndex"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.PrimaryKeyValues">
            <summary>
            Stores "PrimaryKeyValues"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ShowRecordsCountInCaptionRow">
            <summary>
            Stores "ShowRecordsCountInCaptionRow"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.HttpRequestType">
            <summary>
            stores "HttpRequestType"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.DisableSortedColumns">
            <summary>
            Stores "Disable sorting collection"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.DisableDraggedColumns">
            <summary>
            Stores "Disable dragging collection"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.UnBoundColumns">
            <summary>
            Stores "UnBound Columns  collection"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.GridCommands">
            <summary>
            Stores "GridCommands"
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Mvc.Grid.GridUtils.DisableGroupedColumns" -->
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Mvc.Grid.GridUtils.ExcelExportMapper" -->
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.WordExportMapper">
            <summary>
            Stores "Disable Grouped column collection" for WordExport
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.PDFExportMapper">
            <summary>
            Stores "Disable Grouped column collection" for PdfExport
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowScrolling">
            <summary>
            Stores "AllowScrolling"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowVirtualScrolling">
            <summary>
            Stores "AllowVirtualScrolling"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.VirtualScrollMode">
            <summary>
            Stores "Virtual Scroll Mode"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.GridWidth">
            <summary>
            Stores "GridWidth"
            </summary>        
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.GridHeight">
            <summary>
            Stores "GridHeight"
            </summary>   
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.EnableToolbar">
            <summary>
            Stores "Toolbar"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.InlineTemplateForm">
            <summary>
            Stores the form id value for "InlineTemplateForm" mode
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.DialogTemplate">
            <summary>
            Stores the form id value for "DialogTemplate" mode
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ExternalFormTemplate">
            <summary>
            Stores the form id value for "ExternalFormTemplate" mode
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.CloseOnEscape">
            <summary>
            Stores "CloseOnEscape"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.SaveOnEnter">
            <summary>
            Stores "SaveOnEnter"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.JQueryUIquicksearchScript">
            <summary>
            Stores "JQuery UI quick search Script file"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.sfExtensionScript">
            <summary>
            Stores "JQuery UI Script file"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.EnableOnDemandMode">
            <summary>
            Stores "EnableOnDemand"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ResizeToFit">
            <summary>
            Stores "ResizeToFit"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ClipContent">
            <summary>
            Stores "ClipContent"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ExternalFormPosition">
            <summary>
            Stores "ExternalFormPosition"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.TargetID">
            <summary>
            Stores "ExternalForm TargetID"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.ExternalForm">
            <summary>
            Stores "ExternalForm"
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridUtils.AllowAlternateStyle">
            <summary>
            Stores "AllowAlternateRowStyle"
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.NullableHelperInternal">
            <summary>
            A framework independent utility class for the new Nullable type in .NET Framework 2.0
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.NullableHelperInternal.IsComplexType(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Indicates whether the specified PropertyDescriptor has nested properties.
            </summary>
            <param name="pd">The PropertyDescriptor to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.NullableHelperInternal.IsComplexType(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the specified PropertyDescriptor has nested properties.
            </summary>
            <param name="pd">The PropertyDescriptor to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.NullableHelperInternal.IsComplexType(System.Type)">
            <summary>
            Indicates whether the specified Type has nested properties.
            </summary>
            <param name="t">The Type to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.NullableHelperInternal.ChangeType(System.Object,System.Type)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.NullableHelperInternal.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.NullableHelperInternal.FixDbNUllasNull(System.Object,System.Type)">
            <summary>
            Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.NullableHelperInternal.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of a Nullable type. For .NET 1.0 and 1.1 this method will always return null.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.NullableHelperInternal.TypeConverterHelper">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.ValueConvert">
            <summary>
            <see cref="T:Syncfusion.Mvc.Grid.ValueConvert"/> provides conversion routines for values
            to convert them to another type and routines for formatting values.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <overload>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </overload>
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="format">Format string.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Overloaded. Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String[],System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="formats">A string array holding permissible formats used in a <see cref="M:System.Object.ToString"/> call. Right now
            formats is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)">
            <summary>
            Generates display text using the specified format, culture info and number format.
            </summary>
            <param name="value">The value to format.</param>
            <param name="valueType">The value type on which formatting is based. The original value will first be converted to this type.</param>
            <param name="format">The format like in ToString(string format).</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo"/> for formatting the value.</param>
            <param name="nfi">The <see cref="T:System.Globalization.NumberFormatInfo"/> for formatting the value.</param>
            <returns>The string with the formatted text for the value.</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.GetDefaultValue(System.Type)">
            <summary>
            Returns a representative value for any given type. 
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>A value with the specified type.</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@)">
            <summary>
            Overloaded. Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@,System.Boolean)">
            <summary>
            Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <param name="allowConvertFromBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.TryConvertFromBase64String(System.Type,System.String,System.Object@)">
            <summary>
            Indicates whether the TypeConverter associated with the type supports conversion to/from a byte array (e.g. an Image). 
            If that is the case the string is converted to a byte array from a base64 string.
            </summary>
            <param name="type"></param>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.FormatValueWithTypeInformation(System.Object)">
            <summary>
            Overloaded. Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.FormatValueWithTypeInformation(System.Object,System.Boolean)">
            <summary>
            Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <param name="allowConvertToBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.TryConvertToBase64String(System.Object)">
            <summary>
            Indicates whether the TypeConverter associated with the type supports conversion to/from a byte array (e.g. an Image). 
            If that is the case the string is converted to a base64 string from a byte array.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.GetTypeName(System.Type)">
            <summary>
            Returns the type name. If type is not in mscorlib, the assembly name is appended.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.GetType(System.String)">
            <summary>
            Returns the type from the specified name. If an assembly name is appended the list of currently loaded
            assemblies in the current AppDomain are checked.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ValueConvert.IsEmpty(System.String)">
            <summary>
            Indicates whether string is null or empty.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ValueConvert.AllowFormatValueTrimEnd">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Mvc.Grid.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)"/> should trim whitespace characters from
            the end of the formatted text.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.SearchDescriptor.ColumnName">
            <summary>
            Gets or sets the type of column Name.
            </summary>
            <value>the filtercolumn Name.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.SearchDescriptor.Operator">
            <summary>
            Gets or sets the type of the filter.
            </summary>
            <value>The type of the filter.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.SearchDescriptor.Value">
            <summary>
            Gets or sets the filter value.
            </summary>
            <value>The filter value.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.SearchDescriptor.Predicate">
            <summary>
            Gets or sets the type of the predicate.
            </summary>
            <value>The type of the predicate.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.SearchDescriptor.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether this instance is case sensitive.
            </summary>
            <value>
            	<c>true</c> if this instance is case sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridExport">
            <summary>
            Used for Grid exporting
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridExport.WordMapper">
            <summary>
            gets or sets for the Export word Mapper
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridExport.PdfMapper">
            <summary>
            gets or sets for the Export Pdf Mapper
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridExport.ExcelMapper">
            <summary>
            gets or sets for the Export Excel Mapper
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IDialogBuilder.Position(Syncfusion.Mvc.Tools.DialogPositions)">
            <summary>
            Sets the position of the dialog
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IDialogBuilder.Height(System.Double)">
            <summary>
            Sets the height of the dialog
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IDialogBuilder.Width(System.Double)">
            <summary>
            Sets the width of the dialog
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IDialogBuilder.Show(Syncfusion.Mvc.Tools.DialogAnimations)">
            <summary>
            Sets the animation of the dialog while it opens
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IDialogBuilder.Hide(Syncfusion.Mvc.Tools.DialogAnimations)">
            <summary>
            Sets the animation of the dialog while it hides
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IDialogBuilder.Resizable(System.Boolean)">
            <summary>
            Sets the animation of the dialog while it hides
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IDialogBuilder.MaxHeight(System.Double)">
            <summary>
            Sets the maximum height of the dialog
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IDialogBuilder.MaxWidth(System.Double)">
            <summary>
            Sets the maximum width of the dialog
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IDialogBuilder.MinHeight(System.Double)">
            <summary>
            Sets the minimum height of the dialog
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IDialogBuilder.MinWidth(System.Double)">
            <summary>
            Sets the minimum width of the dialog
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IDialogBuilder.Draggable(System.Boolean)">
            <summary>
            Sets the minimum width of the dialog
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IDialogBuilder.ClientSideBeforeClose(System.String)">
            <summary>
            Sets the handler for ClientSideBeforeClose event
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IDialogBuilder.ClientSideClose(System.String)">
            <summary>
            Sets the handler for ClientSideClose event
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IDialogBuilder.ClientSideOpen(System.String)">
            <summary>
            Sets the handler for ClientSideOpen event
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IDialogBuilder.ClientSideFocus(System.String)">
            <summary>
            Sets the handler for ClientSideFocus event
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.ContextMenuItem">
            <summary>
            A group defines a set of records that belong to a category
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ContextMenuItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:ContextMenuItem&lt;T&gt;"/> class.
            </summary>        
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ContextMenuItem.#ctor(Syncfusion.Mvc.Grid.ContextMenuItems)">
            <summary>
            Initializes a new instance of the <see cref="!:ContextMenuItem&lt;T&gt;"/> class.
            </summary>
            <param name="item">ContextMenuItems enum</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ContextMenuItem.#ctor(Syncfusion.Mvc.Grid.ContextMenuItems,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:ContextMenuItem&lt;T&gt;"/> class.
            </summary>
            <param name="item">ContextMenuItems enum</param>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ContextMenuItem.Item">
            <summary>
            Define Context menu item 
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ContextMenuItem.Text">
            <summary>
            Define Context menu item Text that needs to display
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ContextMenuItem.HeaderCss">
            <summary>
            Gets or sets the header CSS for particular context menu item.
            </summary>
            <value>The header CSS.</value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridPDFExportActionResult`1.GetColumnCount(System.Collections.Generic.IEnumerable{Syncfusion.Mvc.Grid.GridColumn{`0}})">
            <summary>        
            Gets the column count.        
            </summary>        
            <param name="columns">The columns.</param>        
            <returns></returns>        
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPDFExportActionResult`1.IsTemplateColumnExt">
            <summary>        
            Gets or sets a value indicating whether the template column exported.        
            </summary>       
            <value>        
            	<c>true</c> if the template column is exported; otherwise, <c>false</c>.        
            </value>        
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPDFExportActionResult`1.IsVisibleColumnExt">
            <summary>
            Gets or sets a value indicating whether this instance is visible column export.
            </summary>
            <value>
            	<c>true</c> if this instance is visible column ext; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridWordExportActionResult`1.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Used to write the result in the context
            </summary>
            <remarks>
            Used to Write the result in Httpcontext during the callbacks.
            </remarks>
            <param name="context">context encapsulates the information about Http
            Request</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridWordExportActionResult`1.GetColumnCount(System.Collections.Generic.IEnumerable{Syncfusion.Mvc.Grid.GridColumn{`0}})">
            <summary>
            Gets the column count.
            </summary>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridWordExportActionResult`1.IsTemplateColumnExt">
            <summary>
            Gets or sets a value indicating whether the template column exported.
            </summary>
            <value>
            	<c>true</c> if the template column is exported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridWordExportActionResult`1.IsVisibleColumnExt">
            <summary>
            Gets or sets a value indicating whether this instance is visible column export.
            </summary>
            <value>
            	<c>true</c> if this instance is visible column ext; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.IGridStackedHeaderBuilder`1">
            <summary>
            Interface for creating stacked header builder
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridStackedRows`1">
            <summary>
            Class for Creating stacked rows.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedRows`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridColumn`1"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridStackedRows`1.MappingName">
             <summary>
            Gets or sets name of the column
             </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridStackedRows`1.HeaderText">
            <summary>
            Gets or sets HeadetText displayed on the column header.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridStackedRows`1.Visible">
            <summary>
            Gets or sets visibility for the column.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridStackedRows`1.StackedColumnsCollection">
            <summary>
            Gets or sets the stacked columns collection.
            </summary>
            <value>
            The stacked columns collection.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridStackedRows`1.StackedRowsCollection">
            <summary>
            Gets or sets the stacked rows collection.
            </summary>
            <value>
            The stacked rows collection.
            </value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridStackedHeaderBuilder`1">
            <summary>
            Class for creating stacked header builder
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedHeaderBuilder`1.#ctor(Syncfusion.Mvc.Grid.Grid{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridStackedHeaderBuilder`1"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedHeaderBuilder`1.StackedRows(System.String,System.Action{Syncfusion.Mvc.Grid.GridStackedRowsBuilder{`0}})">
            <summary>
            Stackeds the rows.
            </summary>
            <param name="name">The name.</param>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.IGridStackedRowsBuilder`1">
            <summary>
            Interface for creating stacked rows.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.IGridStackedColumnsBuilder`1">
            <summary>
            Creating stacked columns.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridStackedColumns`1">
            <summary>
            Class for creating Stacked columns
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedColumns`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridColumn`1"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridStackedColumns`1.MappingName">
             <summary>
            Gets or sets name of the column
             </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridStackedColumns`1.HeaderText">
            <summary>
            Gets or sets HeadetText displayed on the stacked header.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridStackedColumns`1.Visible">
            <summary>
            Gets or sets visibility for the column.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridStackedColumns`1.NestedStackedColumns">
            <summary>
            Gets or sets the nested stacked columns.
            </summary>
            <value>
            The nested stacked columns.
            </value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedRowsBuilder`1.#ctor(Syncfusion.Mvc.Grid.Grid{`0},Syncfusion.Mvc.Grid.GridStackedRows{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridStackedRowsBuilder`1"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="rows">The rows.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedRowsBuilder`1.StackedColumn(System.String,System.Action{Syncfusion.Mvc.Grid.GridStackedColumnsBuilder{`0}})">
            <summary>
            Stackeds the column.
            </summary>
            <param name="name">The name.</param>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedColumnsBuilder`1.#ctor(Syncfusion.Mvc.Grid.Grid{`0},Syncfusion.Mvc.Grid.GridStackedColumns{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridStackedColumnsBuilder`1"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedColumnsBuilder`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Used to add colummns in stacked columns colection
            </summary>
            <param name="expression">Function Delegate</param>
            <returns>GridStackedColumnInstance</returns>        
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedColumnsBuilder`1.HeaderText(System.String)">
            <summary>
            Used to Specify the HeaderText of the column
            </summary>
            <param name="headerName">String contains the text to be displayed on the stacked header</param>
            <returns>ColumnBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedColumnsBuilder`1.MappingName(System.String)">
            <summary>
            Mappings the name.
            </summary>
            <param name="mappingname">The mappingname.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedColumnsBuilder`1.ExpressionToName``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Grabs the property name from a member expression.
            </summary>
            <param name="expression">The expression</param>
            <returns>The name of the property</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedColumnsBuilder`1.ExpressionToMemeber``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Expressions to memeber.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedColumnsBuilder`1.GetPropertyType``1(System.String)">
            <summary>
            Gets the type of the property.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedColumnsBuilder`1.GetPropertyType``1(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets the type of the property.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedColumnsBuilder`1.RemoveUnary(System.Linq.Expressions.Expression)">
            <summary>
            Removes the unary.
            </summary>
            <param name="body">The body.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedColumnsBuilder`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridStackedColumnsBuilder`1.Visible(System.Boolean)">
            <summary>
            Visibles the specified visible.
            </summary>
            <param name="visible">if set to <c>true</c> [visible].</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridStackedColumnsBuilder`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Mvc.Grid.GridStackedColumns`1"/> at the specified index.
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridSummariesBuilder`1">
            <summary>
            Provides method for Grid filters
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridSummariesBuilder`1.AllowSummaries(System.Boolean)">
            <summary>
            sets whether the summary is needed or not.
            </summary>
            <param name="allowSummaries">bool</param>
            <returns>GridSummariesBuilder</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridSummariesBuilder`1.Add(Syncfusion.Mvc.Grid.GridSummaryRowDescriptor)">
            <summary>
            Add one summary row to the GridModel
            </summary>
            <param name="descriptor">GridSummaryRowDescriptor</param>
            <returns>GridSummariesBuilder</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridSummariesBuilder`1.Add(System.Collections.Generic.IEnumerable{Syncfusion.Mvc.Grid.GridSummaryRowDescriptor})">
            <summary>
            Add the list summary rows to the GridModel
            </summary>
            <param name="descriptor">GridSummaryRowDescriptor</param>
            <returns>GridSummariesBuilder</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IKeyConfigurator`1.ShowAlert(System.Boolean)">
            <summary>
            Gets or sets whether the Configuration Alert is needed or not
            </summary>
            <value>boolean</value>
            <remarks>By Default, it is true</remarks>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1">
            <summary>
            KeyCOnfigurator is the class which is used to set different shortcuts for all operations
            Using Keys Enumerable you can set the shortcut to operations such as FocusKey, FirstCellSelection, FirstRowSelection etc
            if one or more grid is there set different shortcuts to focuskey for both the grids.
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Many actions with Keys datatype
            </value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.#ctor(Syncfusion.Mvc.Grid.GridPropertiesModel{`0})">
            <summary>
            It is used in viewside internally
            </summary>
            <param name="gridModel">GridPropertiesModel</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.FocusKey(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.FirstCellSelection(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.LastCellSelection(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.FirstRowSelecion(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.LastRowSelecion(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.InsertRecord(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.DeleteRecord(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.EditRecord(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.ExportToExcel(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.ExportToWord(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.ExportToPDF(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.NextPage(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.PreviousPage(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.LastPage(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.NextPager(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.PreviousPager(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.FirstPage(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.SaveRequest(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.CancelRequest(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.SelectedGroupExpand(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.TotalGroupExpand(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.SelectedGroupCollapse(Syncfusion.Mvc.Grid.Keys)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.TotalGroupCollapse(Syncfusion.Mvc.Grid.Keys)" -->
        <member name="P:Syncfusion.Mvc.Grid.KeyConfiguratorBuilder`1.gridModel">
            <summary>
            It is gridPropertiesmodel used in viewside internally
            </summary>
            <param name="gridModel">GridPropertiesModel</param>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.Grid`1">
            <summary>
            Displays the values of a data source in a table where each column represents a
            field and each row represents a record. The <b>Grid</b> control allows you to
            page, sort and group.  
            </summary>
            <remarks>
            <para>The <b>Grid</b> control is used to display the values of a data source in
            a table. Each column represents a field, while each row represents a record. The
            <b>Grid</b> control supports the following features:</para>
            <para></para>
            <para>    </para>
            <para>      Binding to any kind of IEnumerable  data source.</para>
            <para>    </para>
            <para>      Built-in sorting capabilities.</para>
            <para></para>
            <para>      Built-in paging capabilities.</para>
            <para></para>
            <para>      Built-in grouping capabilities.</para>
            <para></para>   
            <para>      Built-in row selection capabilities.</para>
            <para></para>
            <para>      Built-in Template Columns capabilities.</para>
            <para></para>
            <para>      Built-in support for JSON Mode for paging and sorting, in which user
            can handle all the mentioned operations. </para>
            <para></para>
            <para>      Built-in support for column customization.</para>
            <para>       </para>
            </remarks>
            <example>
            The following code example demonstrates how to use the constructor to
            dynamically add a <b>Grid</b> control to a page. 
            <para></para>
            <para>//// Create a new Grid object. </para>
            <para>Grid grid = new Grid();</para>
            <para></para>
            <para>////Set the Grid object's properties.</para>
            <para>grid.ID = &quot;CodeBehindGrid&quot;;</para>
            <para>grid.GridModel = model;</para>
            <para>//// Add the Grid object to the Controls collection</para>
            <para>//// of the PlaceHolder control.</para>
            <para>GridViewPlaceHolder.Controls.Add(grid);</para>
            </example>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridBase`1">
            <summary>
            Grid Component Base Class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridBase`1.#ctor(System.Web.Mvc.HtmlHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridBase`1"/> class.
            </summary>
            <param name="helper">The helper.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridBase`1.Render">
            <summary>
            Renders this instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridBase`1.HtmlHelper">
            <summary>
            Gets or sets the HTML helper.
            </summary>
            <value>The HTML helper.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridBase`1.ViewContext">
            <summary>
            Gets the view context.
            </summary>
            <value>The view context.</value>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Grid`1.m_id">
            <summary>
            Stored grid id;
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Grid`1.gridModel">
            <summary>
            Grid model object instance
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Grid`1.SortColumns">
            <summary>
            Array of sorted column name at initial load
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Grid`1.SortDirections">
            <summary>
            Array of sorted Directions for sorted columns at initial load
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Grid`1._waitingPopup">
            <summary>
            waiting popup mode instance
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Grid`1.render">
            <summary>
            GridRenderer object instance
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Grid`1.filterRender">
            <summary>
            Grid Filter Render object instance
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Grid`1.editRender">
            <summary>
            Grid Edit Render object instance
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Grid`1.#ctor(System.String,Syncfusion.Mvc.Grid.GridPropertiesModel{`0},System.Web.Mvc.HtmlHelper)">
            <summary>
            Initializes a new instance of the Grid class
            </summary>
            <remarks>
            Use this constructor to initialize a new instance of the <b>Grid</b> class. To
            dynamically add a <b>Grid</b> control to a page, create a new <b>Grid</b>
            object, set its properties, and then add it to the some Place Holder.
            </remarks>
            <example>
            The following code example demonstrates how to use the constructor to
            dynamically add a <b>Grid</b> control to a page. 
            <para></para>
            <code lang="C#">//// Create a new Grid object. 
            Grid grid = new Grid();</code>
            <para></para>
            <para></para>////Set the Grid object's properties.
            <para></para>grid.ID = &quot;CodeBehindGrid&quot;;
            <para></para>grid.GridModel = model;
            <para></para>//// Add the Grid object to the Controls collection
            <para></para>//// of the PlaceHolder control.
            <para></para>GridViewPlaceHolder.Controls.Add(grid);
            </example> 
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Grid`1.#ctor(System.Web.Mvc.HtmlHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.Grid`1"/> class.
            </summary>
            <param name="helper">The helper.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Grid`1.RegisterResource">
            <summary>
            All resources are added here 
            </summary>        
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Grid`1.CreateScriptDescriptor">
            <summary>
            All the client side  properties are added here 
            </summary>       
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Grid`1.InitializeColumns">
            <summary>
            Initializes the columns.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Grid`1.AddInitialFiltering">
            <summary>
            Adds the initial filtering.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Grid`1.AddInitialEditing">
            <summary>
             Adds the initial Editing.
             </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Grid`1.AddInitialSortedColumns">
            <summary>
            Adds initial sorted columns at initial load
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Grid`1.AddInitialDraggedColumns">
            <summary>
            Adds initial dragged columns at initial load
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Grid`1.AddInitialGrouping">
            <summary>
            Adds the initial grouping.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Grid`1.RegisterActionMappers">
            <summary>
            Registers the action mappers.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Grid`1.Render">
            <summary>
            Renders this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Grid`1.RenderControlWithScript">
            <summary>
            Renders this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Grid`1.InitializeFiltering(Syncfusion.Mvc.Shared.Html.HtmlTag)">
            <summary>
            Initializes the filtering.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Grid`1.InitializeEditing(Syncfusion.Mvc.Shared.Html.HtmlTag)">
            <summary>
            Initializes the editing.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.Grid`1.ID">
            <summary>
            Gets or sets <b>ID</b> of the <b>Grid </b>control.
            </summary>
            <remarks>
            This property is used to access the <b>Grid</b> control uniquely
            </remarks>
            <value>
            A string that represents the <b>ID</b> of the <b>Grid </b>control.
            </value>
            <example>
            The following code example demonstrates how to use the ID property 
            <para></para>
            <code lang="C#">Grid grid = new Grid();
            grid.ID = &quot;EmployeeGrid;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.Grid`1.Datasource">
            <summary>
            Gets or sets the datasource.
            </summary>
            <value>The datasource.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.Grid`1.GridServerActionMapper">
            <summary>
            Gets or sets the grid server action mapper.
            </summary>
            <value>The grid server action mapper.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.Grid`1.GridJSONActionMapper">
            <summary>
            Gets or sets the grid JSON action mapper.
            </summary>
            <value>The grid JSON action mapper.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.Grid`1.GridModel">
            <summary>
            Gets or sets GridPropertiesModel object which holds all properties and events of the <b>Grid
            </b>control
            </summary>
            <remarks>
            This property contains all the properties and events of the <b>Grid</b> control.
            </remarks>
            <value>
            Object represents the all properties and events of the <b>Grid </b>control
            </value>
            <example>
            The following code example demonstrates how to use the <b>GridModel</b> property
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel =new GridPropertiesModel();
            Grid grid = new Grid();
            grid.GridModel = gridModel;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.Grid`1.PrimaryKeyValues">
            <summary>
            Gets or sets the primary key values.
            </summary>
            <value>The primary key values.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.Grid`1.ViewContext">
            <summary>
            Gets or sets the view context.
            </summary>
            <value>The view context.</value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridCellRangeInfo`1">
            <summary>
            Class GridCellRangeInfo
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridCellRangeInfo`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridCellRangeInfo`1"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridCellRangeInfo`1.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridCellRangeInfo`1"/> class.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the col.</param>
            <param name="rowSpan">The row span.</param>
            <param name="colSpan">The col span.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridCellRangeInfo`1.SetRange(System.Int32,System.Int32)">
            <summary>
            Sets the range.
            </summary>
            <param name="rowSpan">The row span.</param>
            <param name="colSpan">The col span.</param>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridCellRangeInfo`1.RowIndex">
            <summary>
            Gets the index of the row.
            </summary>
            <value>
            The index of the row.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridCellRangeInfo`1.ColumnIndex">
            <summary>
            Gets the index of the column.
            </summary>
            <value>
            The index of the column.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridCellRangeInfo`1.RowSpan">
            <summary>
            Gets or sets the row span.
            </summary>
            <value>
            The row span.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridCellRangeInfo`1.ColumnSpan">
            <summary>
            Gets or sets the column span.
            </summary>
            <value>
            The column span.
            </value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.ClientSideEvents">
            <summary>
            It contains list of clientside events. 
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.QueryCellInfo">
            <summary>
            QueryCellInfo Clientside event only applicable for JSON Mode.
            </summary>
            <value>It contains the string which defines the handler.</value>
            <example><code>GridPropertiesModel<typeparamref name="T"/> model=new GridPropertiesModel<typeparamref name="T"/>();
            model.ClientSideEvents.QueryCellInfo = "QueryCellInfoHandler";
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.MergeCellInfo">
            <summary>
            MergeCellInfo Clientside event only applicable for JSON Mode.
            </summary>
            <value>It contains the string which defines the handler.</value>
            <example><code>GridPropertiesModel<typeparamref name="T"/> model=new GridPropertiesModel<typeparamref name="T"/>();
            model.ClientSideEvents.MergeCellInfo = "MergeCellInfoHandler";
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.RowDataBound">
            <summary>
            RowDataBound Clientside event only applicable for JSON Mode.
            </summary>
            <value>It contains the string which defines the handler.</value>
            <example><code>GridPropertiesModel<typeparamref name="T"/> model=new GridPropertiesModel<typeparamref name="T"/>();
            model.ClientSideEvents.RowDataBound = "RowDataBoundHandler";
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnRecordSelectionEvent">
            <summary>
            Gets or sets Handler name of the <b>ClientSideRecordSelectionEvent</b>
            </summary>
            <value>
            String represents the Hanlder name for <b>ClientSideRecordSelectEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>ClientSideRecordSelectionEvent
            </b> property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.ClientSideEvents.ClientSideRecordSelectionEvent = &quot;OnRowSelect&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnGridRowDragEvent">
            <summary>
            Gets or sets Handler name of the <b>OnGridRowDragEvent</b>
            </summary>
            <value>
            String represents the Hanlder name for <b>OnGridRowDragEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnGridRowDragEvent
            </b> property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.ClientSideEvents.OnGridRowDragEvent = &quot;OnElementDrag&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnGridRowsDropEvent">
            <summary>
            Gets or sets Handler name of the <b>OnGridRowsDropEvent</b>
            </summary>
            <value>
            String represents the Hanlder name for <b>OnGridRowsDropEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnGridRowsDropEvent
            </b> property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.ClientSideEvents.OnGridRowsDropEvent = &quot;OnElementDrop&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnRecordHoverEvent">
            <summary>
            Gets or sets Handler name of the ClientSideRecordHoverEvent
            </summary>
            <value>
            String represents the Hanlder name for <b>ClientSideRecordHoverEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>ClientSideRecordhoverEvent </b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.ClientSideEvents.ClientSideRecordHoverEvent = &quot;OnRowHover&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnRowDragStarted">
            <summary>
            Gets or sets Handler name of the ClientSideRecordHoverEvent
            </summary>
            <value>
            String represents the Hanlder name for <b>ClientSideRecordHoverEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>ClientSideRecordhoverEvent </b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.ClientSideEvents.OnRowDragStarted = &quot;OnRowsSelected&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnRecordsUnselectionEvent">
            <summary>
            Gets or sets Handler name of the <b>ClientSideRecordsUnselectionEvent</b>
            </summary>
            <value>
            String represents the Hanlder name for <b>ClientSideRecordsUnselectionEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>ClientSideRecordsUnselectionEvent
            </b> property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.ClientSideEvents.ClientSideRecordsUnselectionEvent = &quot;OnRowUnselect&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnRowDropping">
            <summary>
            Gets or sets Handler name of the ClientSideRecordHoverEvent
            </summary>
            <value>
            String represents the Hanlder name for <b>ClientSideRecordHoverEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>ClientSideRecordhoverEvent </b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.ClientSideEvents.OnRowDropping = &quot;OnDroppingTarget&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnRowDropped">
            <summary>
            Gets or sets Handler name of the OnRowDropped
            </summary>
            <value>
            String represents the Hanlder name for <b>OnRowDropped</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnRowDropped </b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.ClientSideEvents.OnRowDropped = &quot;OnDropTargetCompleted&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnDoubleClickEvent">
            <summary>
            Gets or sets Handler name of the ClientSideDoubleClickEvent
            </summary>
            <value>
            String represents the Hanlder name for <b>ClientSideDoubleClickEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>ClientSideDoubleClickEvent </b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.ClientSideEvents.ClientSideDoubleClickEvent = &quot;OnRowDblClick&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnToolbarClickEvent">
            <summary>
            Gets or sets Handler name of the OnToolbarClickEvent
            </summary>
            <value>
            String represents the Hanlder name for <b>OnToolbarClickEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnToolbarClickEvent </b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.ClientSideEvents.OnToolbarClickEvent = &quot;OnToolbarClick&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnLoad">
            <summary>
            Gets or sets Handler name of the OnLoad event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnLoad</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnLoad </b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnLoad = &quot;OnLoad&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnActionFailure">
            <summary>
            Gets or sets Handler name of the OnActionFailure event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnActionFailure</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnActionFailure</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnActionFailure = &quot;OnGridActionFailure&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnActionBegin">
            <summary>
            Gets or sets Handler name of the OnActionBegin event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnActionBegin</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnActionBegin</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnActionBegin = &quot;OnGridActionBegin&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnActionSuccess">
            <summary>
            Gets or sets Handler name of the OnActionSuccess event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnActionSuccess</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnActionSuccess</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnActionSuccess = &quot;OnGridActionSuccess&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnActionComplete">
            <summary>
            Gets or sets Handler name of the OnActionComplete event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnActionComplete</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnActionComplete</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnActionComplete = &quot;OnGridActionComplete&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnResizingStart">
            <summary>
            Gets or sets Handler name of the onResizingStart event
            </summary>
            <value>
            String represents the Hanlder name for <b>onResizingStart</b>
            </value>
            <example>
            The following example demonstrates how to use <b>onResizingStart</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.onResizingStart = &quot;onResizingStart&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnResizingEnd">
            <summary>
            Gets or sets Handler name of the onResizingEnd event
            </summary>
            <value>
            String represents the Hanlder name for <b>onResizingEnd</b>
            </value>
            <example>
            The following example demonstrates how to use <b>onResizingEnd</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.onResizingEnd = &quot;onResizingEnd&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.Resized">
            <summary>
            Gets or sets Handler name of the Resized event
            </summary>
            <value>
            String represents the Hanlder name for <b>Resized</b>
            </value>
            <example>
            The following example demonstrates how to use <b>Resized</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.Resized = &quot;Resized&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.BeforeDrop">
            <summary>
            Gets or sets Handler name of the BeforeDrop event
            </summary>
            <value>
            String represents the Hanlder name for <b>BeforeDrop</b>
            </value>
            <example>
            The following example demonstrates how to use <b>BeforeDrop</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.BeforeDrop = &quot;BeforeDrop&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnDragStart">
            <summary>
            Gets or sets Handler name of the onDragStart event
            </summary>
            <value>
            String represents the Hanlder name for <b>onDragStart</b>
            </value>
            <example>
            The following example demonstrates how to use <b>onDragStart</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.onDragStart = &quot;onDragStart&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.AfterDrop">
            <summary>
            Gets or sets Handler name of the AfterDrop event
            </summary>
            <value>
            String represents the Hanlder name for <b>AfterDrop</b>
            </value>
            <example>
            The following example demonstrates how to use <b>AfterDrop</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.AfterDrop = &quot;AfterDrop&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.MouseUpDrop">
            <summary>
            Gets or sets Handler name of the MouseUpDrop event
            </summary>
            <value>
            String represents the Hanlder name for <b>MouseUpDrop</b>
            </value>
            <example>
            The following example demonstrates how to use <b>MouseUpDrop</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.MouseUpDrop = &quot;MouseUpDrop&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnRecordEdit">
            <summary>
            Gets or sets Handler name of the OnRecordEdit event. This applies only in JSON Mode.
            </summary>
            <value>
            String represents the Hanlder name for <b>OnRecordEdit</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnRecordEdit</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnRecordEdit = &quot;OnGridRecordEdit&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnRecordAddNew">
            <summary>
            Gets or sets Handler name of the OnRecordAddNew event. This applies only in JSON Mode.
            </summary>
            <value>
            String represents the Hanlder name for <b>OnRecordAddNew</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnRecordAddNew</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnRecordAddNew = &quot;OnGridRecordAddNew&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnCancel">
            <summary>
            Gets or sets Handler name of the OnCancel event. This applies only in JSON Mode.
            </summary>
            <value>
            String represents the Hanlder name for <b>OnCancel</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnCancel</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnCancel = &quot;OnGridCancelRequest&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnRecordCollapsed">
            <summary>
            Gets or sets Handler name of the OnRecordCollapsed event. i.e. When Childrow gets minimized
            </summary>
            <value>
            String represents the Hanlder name for <b>OnRecordCollapsed</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnRecordCollapsed</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnRecordCollapsed = &quot;OnRecordCollapsed&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnRecordCollapsing">
            <summary>
            Gets or sets Handler name of the OnRecordCollapsing event. i.e. When Childrow gets minimizing
            </summary>
            <value>
            String represents the Hanlder name for <b>OnRecordCollapsing</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnRecordCollapsing</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnRecordCollapsing = &quot;OnRecordCollapsing&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnRecordExpanded">
            <summary>
            Gets or sets Handler name of the OnRecordExpanded event. i.e. When Childrow gets maximized
            </summary>
            <value>
            String represents the Hanlder name for <b>OnRecordExpanded</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnRecordExpanded</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnRecordExpanded = &quot;OnRecordExpanded&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnRecordExpanding">
            <summary>
            Gets or sets Handler name of the OnRecordExpanding event. i.e. When Childrow gets maximizing
            </summary>
            <value>
            String represents the Hanlder name for <b>OnRecordExpanding</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnRecordExpanding</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnRecordExpanding = &quot;OnRecordExpanding&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnContextMenuClose">
            <summary>
            Gets or sets Handler name of the OnContextMenuClose event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnContextMenuClose</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnContextMenuClose</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnContextMenuClose = &quot;OnContextMenuClose&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnContextMenuItemClick">
            <summary>
            Gets or sets Handler name of the OnContextMenuItemClick event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnContextMenuItemClick</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnContextMenuItemClick</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnContextMenuItemClick = &quot;OnContextMenuItemClick&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnResizeHandleDblClick">
            <summary>
            Gets or sets Handler name of the OnResizeHandleDblClick event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnResizeHandleDblClick</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnResizeHandleDblClick</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnResizeHandleDblClick = &quot;OnResizeHandleDblClick&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnContextMenuOpen">
            <summary>
            Gets or sets Handler name of the OnContextMenuOpen event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnContextMenuOpen</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnContextMenuOpen</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnContextMenuOpen = &quot;OnContextMenuOpen&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnBeforeContextMenuOpen">
            <summary>
            Gets or sets Handler name of the OnBeforeContextMenuOpen event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnBeforeContextMenuOpen</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnBeforeContextMenuOpen</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnBeforeContextMenuOpen = &quot;OnBeforeContextMenuOpen&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnCellEdit">
            <summary>
            Gets or sets Handler name of the OnCellEdit event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnCellEdit</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnCellEdit</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnCellEdit = &quot;OnCellEdit&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnCellSave">
            <summary>
            Gets or sets Handler name of the OnCellSave event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnCellSave</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnCellSave</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnCellSave = &quot;OnCellSave&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnBulkSave">
            <summary>
            Gets or sets Handler name of the OnBulkSave event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnBulkSave</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnBulkSave</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnBulkSave = &quot;OnBulkSave&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ClientSideEvents.OnCustomUnboundCellClickHandler">
            <summary>
            Gets or sets Handler name of the OnCustomUnboundCellClickHandler event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnCustomUnboundCellClickHandler</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnCustomUnboundCellClickHandler</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.ClientSideEvents.OnCustomUnboundCellClickHandler = &quot;OnCustomUnboundCellClickHandler&quot;;</code>
            </example>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.Group`1">
            <summary>
             A group defines a set of records that belong to a category
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Group`1.#ctor(System.Object,System.Int32,System.Collections.IEnumerable,System.Int32,Syncfusion.Mvc.Grid.Group{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.Group`1"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="count">The count.</param>
            <param name="details">The details.</param>
            <param name="groupLevel">The group level.</param>
            <param name="parentGroup">The parent group.</param>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Group`1.records">
            <summary>
            used to stores the record object
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Group`1.childGroups">
            <summary>
            used to stores the sub group object
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.Group`1.Details">
            <summary>
            Gets or sets the details.
            </summary>
            <value>The details.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.Group`1.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.Group`1.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.Group`1.GroupLevel">
            <summary>
            Gets or sets the group level.
            </summary>
            <value>The group level.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.Group`1.Records">
            <summary>
            Gets the records.
            </summary>
            <value>The records.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.Group`1.ParentGroup">
            <summary>
            Gets or sets the parent group.
            </summary>
            <value>The parent group.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.Group`1.ChildGroups">
            <summary>
            Gets or sets the child groups.
            </summary>
            <value>The child groups.</value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GroupCaption`1">
            <summary>
            Represents the Group Caption element row
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.INode`1">
            <summary>
            Provides Node information about the grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.INode`1.NodeType">
            <summary>
            Gets the type of the node.
            </summary>
            <value>The type of the node.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.INode`1.IsGroupRow">
            <summary>
            Gets a value indicating whether this instance is group row.
            </summary>
            <value>
            	<c>true</c> if this instance is group row; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.INode`1.IsRecordRows">
            <summary>
            Gets a value indicating whether this instance is record rows.
            </summary>
            <value>
            	<c>true</c> if this instance is record rows; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.INode`1.GroupLevel">
            <summary>
            Gets the group level.
            </summary>
            <value>The group level.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.INode`1.IsColumnHeaderRow">
            <summary>
            Gets a value indicating whether this instance is column header row.
            </summary>
            <value>
            	<c>true</c> if this instance is column header row; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.INode`1.IsSummaryRow">
            <summary>
            Gets a value indicating whether this instance is summary row.
            </summary>
            <value>
            	<c>true</c> if this instance is summary row; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.INode`1.Record">
            <summary>
            Returns Record if Element is RecordRow otherwise null.
            </summary>
            <value>The record.</value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GroupCaption`1.#ctor(Syncfusion.Mvc.Grid.GridPropertiesModel{`0},Syncfusion.Mvc.Grid.Group{`0},System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GroupCaption`1"/> class.
            </summary>
            <param name="gridModel">The grid model.</param>
            <param name="group">The group.</param>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GroupCaption`1.nodeType">
            <summary>
            Stores the Node type of this group element
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GroupCaption`1.captionText">
            <summary>
            Stores the Caption text
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.Record`1">
            <summary>
            Represents a record for Grid Row
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.Record`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.Record`1"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Record`1.nodeType">
            <summary>
            Stores the node type for this record instance
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.Record`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.ChildGridTemplate">
            <summary>
            To render the ChildGrid user have to render the grid as this type
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ChildGridTemplate.#ctor">
            <summary>
            Constructor for ChildGridTemplate
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ChildGridTemplate.ChildGrid">
            <summary>
            it contains the rendered string for ChildGrid
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.QueryCellInfo(System.String)">
            <summary>
            Client side QueryCellInfo event handler which applies only in JSON Mode.
            </summary>
            <param name="handler">string</param>
            <returns>IGridBuilder</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.MergeCellInfo(System.String)">
            <summary>
            Client side MergeCellInfo event handler which applies only in JSON Mode
            </summary>
            <param name="handler">string.</param>
            <returns>IGridBuilder</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.RowDataBound(System.String)">
            <summary>
            Client side RowDataBound event handler which applies only in JSON Mode.
            </summary>
            <param name="handler">string</param>
            <returns>IGridBuilder</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnRecordEdit(System.String)">
            <summary>
            Sets Handler name of the OnRecordEdit event. This applies only in JSON Mode.
            </summary>
            <value>
            String represents the Hanlder name for <b>OnRecordEdit</b>
            </value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnRecordAddNew(System.String)">
            <summary>
            Gets or sets Handler name of the OnRecordAddNew event. This applies only in JSON Mode.
            </summary>
            <value>
            String represents the Hanlder name for <b>OnRecordAddNew</b>
            </value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnCancel(System.String)">
            <summary>
            Gets or sets Handler name of the OnCancel event. This applies only in JSON Mode.
            </summary>
            <value>
            String represents the Hanlder name for <b>OnCancel</b>
            </value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnCellEdit(System.String)">
            <summary>
            Gets or sets Handler name of the OnCellEdit event
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnCellSave(System.String)">
            <summary>
            Gets or sets Handler name of the OnCellSave event
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnBulkSave(System.String)">
            <summary>
            Gets or sets Handler name of the OnBulkSave event
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnToolbarClickEvent(System.String)">
            <summary>
            Gets or sets Handler name of the OnToolbarClick event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnToolbarClick</b>
            </value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnActionComplete(System.String)">
            <summary>
            Gets or sets Handler name of the OnActionComplete event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnActionComplete</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnActionComplete</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.OnActionComplete("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnResizingStart(System.String)">
            <summary>
            Gets or sets Handler name of the OnResizingStart event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnResizingStart</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnResizingStart</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.OnResizingStart("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnResizingEnd(System.String)">
            <summary>
            Gets or sets Handler name of the OnResizingEnd event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnResizingEnd</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnResizingEnd</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.OnResizingEnd("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.Resized(System.String)">
            <summary>
            Gets or sets Handler name of the Resized event
            </summary>
            <value>
            String represents the Hanlder name for <b>Resized</b>
            </value>
            <example>
            The following example demonstrates how to use <b>Resized</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.Resized("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnDragStart(System.String)">
            <summary>
            Gets or sets Handler name of the OnDragStart event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnDragStart</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnDragStart</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.OnDragStart("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.BeforeDrop(System.String)">
            <summary>
            Gets or sets Handler name of the BeforeDrop event
            </summary>
            <value>
            String represents the Hanlder name for <b>BeforeDrop</b>
            </value>
            <example>
            The following example demonstrates how to use <b>BeforeDrop</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.BeforeDrop("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.AfterDrop(System.String)">
            <summary>
            Gets or sets Handler name of the AfterDrop event
            </summary>
            <value>
            String represents the Hanlder name for <b>AfterDrop</b>
            </value>
            <example>
            The following example demonstrates how to use <b>AfterDrop</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.AfterDrop("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.MouseUpDrop(System.String)">
            <summary>
            Gets or sets Handler name of the MouseUpDrop event
            </summary>
            <value>
            String represents the Hanlder name for <b>MouseUpDrop</b>
            </value>
            <example>
            The following example demonstrates how to use <b>MouseUpDrop</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.MouseUpDrop("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnRecordCollapsed(System.String)">
            <summary>
            Gets or sets Handler name of the OnRecordCollapsed event. i.e. When Childrow gets minimized
            </summary>
            <value>
            String represents the Hanlder name for <b>OnRecordCollapsed</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnRecordCollapsed</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.OnRecordCollapsed("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnRecordCollapsing(System.String)">
            <summary>
            Gets or sets Handler name of the OnRecordCollapsing event. i.e. When Childrow gets minimizing
            </summary>
            <value>
            String represents the Hanlder name for <b>OnRecordCollapsing</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnRecordCollapsing</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.OnRecordCollapsing("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnRecordExpanded(System.String)">
            <summary>
            Gets or sets Handler name of the OnRecordExpanded event. i.e. When Childrow gets maximized
            </summary>
            <value>
            String represents the Hanlder name for <b>OnRecordExpanded</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnRecordExpanded</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.OnRecordExpanded("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnRecordExpanding(System.String)">
            <summary>
            Gets or sets Handler name of the OnRecordExpanding event. i.e. When Childrow gets maximizing
            </summary>
            <value>
            String represents the Hanlder name for <b>OnRecordExpanding</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnRecordExpanding</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.OnRecordExpanding("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnBeforeContextMenuOpen(System.String)">
            <summary>
            Gets or sets Handler name of the OnBeforeContextMenuOpen event.
            </summary>
            <value>
            String represents the Hanlder name for <b>OnBeforeContextMenuOpen</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnBeforeContextMenuOpen</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.OnBeforeContextMenuOpen("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnContextMenuOpen(System.String)">
            <summary>
            Gets or sets Handler name of the OnContextMenuOpen event.
            </summary>
            <value>
            String represents the Hanlder name for <b>OnContextMenuOpen</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnContextMenuOpen</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.OnContextMenuOpen("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnContextMenuItemClick(System.String)">
            <summary>
            Gets or sets Handler name of the OnContextMenuItemClick event.
            </summary>
            <value>
            String represents the Hanlder name for <b>OnContextMenuItemClick</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnContextMenuItemClick</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.OnContextMenuItemClick("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnContextMenuClose(System.String)">
            <summary>
            Gets or sets Handler name of the OnContextMenuClose event.
            </summary>
            <value>
            String represents the Hanlder name for <b>OnContextMenuClose</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnContextMenuClose</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.OnContextMenuClose("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridClientsideBuilder`1.OnCustomUnboundCellClickHandler(System.String)">
            <summary>
            Gets or sets Handler name of the OnCustomUnboundCellClickHandler event.
            </summary>
            <value>
            String represents the Hanlder name for <b>OnCustomUnboundCellClickHandler</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnCustomUnboundCellClickHandler</b>
            property 
            <para></para>
            <code lang="aspx">&lt;%= Html.Grid("Sample").ClientSideEvents(events=>{
                events.OnCustomUnboundCellClickHandler("handler");
            })</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridClientsideBuilder`1.MergeCellInfo(System.String)">
            <summary>
            Called when [cell merging].
            </summary>
            <param name="handler">The handler.</param>
            <returns>ClientsideBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridClientsideBuilder`1.OnCustomUnboundCellClickHandler(System.String)">
            <summary>
            Called when [custom unbound cell click handler].
            </summary>
            <param name="handler">The handler.</param>
            <returns>ClientsideBuilder instance</returns>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridFilterBuilder`1">
            <summary>
            Provides method for Grid filters
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridFilterBuilder`1.#ctor(Syncfusion.Mvc.Grid.GridFiltering)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridFilterBuilder`1"/> class.
            </summary>
            <param name="filtering">The filtering.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridFilterBuilder`1.AllowFiltering(System.Boolean)">
             <summary>
             Allows the filtering.
             </summary>
             <param name="enable">if set to <c>true</c> [enable].</param>
             The following code example demonstrates how to use
             a <b>AllowFiltering</b> to a grid filters.
             <example>
             [View] 
             <para></para>
             <code lang="ASPX"><code><pre> &lt;%=Html.Grid&lt;Order&gt;("Grid1")
               .Datasource(Model)
            .Caption("Orders")
            .Filtering(f =&gt;
             {
                  f.AllowFiltering(true);
              })
             %&gt;</pre></code>
             </code>
             </example>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridFilterBuilder`1.AllowFormatFiltering(System.Boolean)">
            <summary>
            Allows the formatted filter choices  cause delay in filtering
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridFilterBuilder`1.AllowCaseSensitive(System.Boolean)">
            <summary>
            Allows the case sensitive filtering
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridFilterBuilder`1.FilterBarMode(Syncfusion.Mvc.Grid.FilterBarMode)">
            <summary>
            Gets or sets the filter bar mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridFilterBuilder`1.FilterMode(Syncfusion.Mvc.Grid.FilterMode)">
            <summary>
            Gets or sets the filter mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridFilterBuilder`1.ShowFilterStatusMessage(System.Boolean)">
            <summary>
            Gets or sets a value indicating whether the filter msg status bar is shown or not when filter mode is set to filterbar..
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridFilterBuilder`1.FilterStatusBarWidth(System.Int32)">
            <summary>
            Gets or sets a value indicating the width of the filter status bar
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridFilterBuilder`1.FilterDropDownType(Syncfusion.Mvc.Grid.FilterDropDownType)">
             <summary>
             Filters the type of the drop down.
             </summary>
             <param name="type">The type.</param>
             The following code example demonstrates how to use
             a <b>FilterDropDownType</b> to a grid filters.
             <example>
             [View] 
             <para></para>
             <code lang="ASPX"><code><pre> &lt;%=Html.Grid&lt;Order&gt;("Grid1")
               .Datasource(Model)
            .Caption("Orders")
            .Filtering(f =&gt;
             {
                f.FilterDropDownType(FilterDropDownType.CheckBoxList);
                 f.FilterDescriptors(d =&gt;
                 {
                     d.Add(c =&gt; c.EmployeeID).FilterBy(Syncfusion.Linq.FilterType.Equals).FilterValue(5).Predicate(PredicateType.Or);
                     d.Add(c =&gt; c.EmployeeID).FilterBy(Syncfusion.Linq.FilterType.Equals).FilterValue(4);
                  });
              })
             %&gt;</pre></code>
             </code>
             </example>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridFilterBuilder`1.FilterDescriptors(System.Action{Syncfusion.Mvc.Grid.GridFiltersBuilder{`0}})">
             <summary>
             Filters the descriptors.
             </summary>
             <param name="descriptors">The descriptors.</param>
             <returns></returns>
             The following code example demonstrates how to use
             a <b>Predicate</b> to a grid filters.
             <example>
             [View] 
             <para></para>
             <code lang="ASPX"><code><pre> &lt;%=Html.Grid&lt;Order&gt;("Grid1")
               .Datasource(Model)
            .Caption("Orders")
            .Filtering(f =&gt;
             {
                f.AllowFiltering(true);
                 f.FilterDescriptors(d =&gt;
                 {
                     d.Add(c =&gt; c.EmployeeID).FilterBy(Syncfusion.Linq.FilterType.Equals).FilterValue(5).Predicate(PredicateType.Or);
                     d.Add(c =&gt; c.EmployeeID).FilterBy(Syncfusion.Linq.FilterType.Equals).FilterValue(4);
                  });
              })
             %&gt;</pre></code>
             </code>
             </example>
             <returns></returns>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridFiltersBuilder`1">
            <summary>
            Provides methods for filter builders
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridFiltersBuilder`1.#ctor(System.Collections.Generic.IList{Syncfusion.Mvc.Grid.FilterDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridFiltersBuilder`1"/> class.
            </summary>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridFiltersBuilder`1.Add(Syncfusion.Mvc.Grid.FilterDescriptor)">
             <summary>
             Adds the single filter descriptor.
             </summary>
             <typeparam name="TProperty">The type of the property.</typeparam>
             <param name="expression">The expression.</param>
             The following code example demonstrates how to use
             a <b>Predicate</b> to a grid filters.
             <example>
             [View] 
             <para></para>
             <code lang="ASPX"><code><pre> &lt;%=Html.Grid&lt;Order&gt;("Grid1")
               .Datasource(Model)
            .Caption("Orders")
            .Filtering(f =&gt;
             {
                f.AllowFiltering(true);
                 f.FilterDescriptors(d =&gt;
                 {
                     d.Add((FilterDescriptor)ViewData["descriptor"]);
                  });
              })
             %&gt;</pre></code>
             </code>
             </example>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridFiltersBuilder`1.Add(System.Collections.Generic.IEnumerable{Syncfusion.Mvc.Grid.FilterDescriptor})">
             <summary>
             Adds the list of filter descriptor
             </summary>
             <typeparam name="TProperty">The type of the property.</typeparam>
             <param name="expression">The expression.</param>
             The following code example demonstrates how to use
             a <b>Predicate</b> to a grid filters.
             <example>
             [View] 
             <para></para>
             <code lang="ASPX"><code><pre> &lt;%=Html.Grid&lt;Order&gt;("Grid1")
               .Datasource(Model)
            .Caption("Orders")
            .Filtering(f =&gt;
             {
                f.AllowFiltering(true);
                 f.FilterDescriptors(d =&gt;
                 {
                     d.Add((IEnumerable&lt;FilterDescriptor&gt;)ViewData["descriptors"]);
                  });
              })
             %&gt;</pre></code>
             </code>
             </example>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridFiltersBuilder`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
             <summary>
             Adds the specified expression.
             </summary>
             <typeparam name="TProperty">The type of the property.</typeparam>
             <param name="expression">The expression.</param>
             The following code example demonstrates how to use
             a <b>Predicate</b> to a grid filters.
             <example>
             [View] 
             <para></para>
             <code lang="ASPX"><code><pre> &lt;%=Html.Grid&lt;Order&gt;("Grid1")
               .Datasource(Model)
            .Caption("Orders")
            .Filtering(f =&gt;
             {
                f.AllowFiltering(true);
                 f.FilterDescriptors(d =&gt;
                 {
                     d.Add(c =&gt; c.EmployeeID).FilterBy(Syncfusion.Linq.FilterType.Equals).FilterValue(5).Predicate(PredicateType.Or);
                     d.Add(c =&gt; c.EmployeeID).FilterBy(Syncfusion.Linq.FilterType.Equals).FilterValue(4);
                  });
              })
             %&gt;</pre></code>
             </code>
             </example>
             <returns></returns>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridFilterDescriptorBuilder`1">
            <summary>
            Provides methods for filter descriptors
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridFilterDescriptorBuilder`1.Predicate(Syncfusion.Mvc.Grid.PredicateType)">
             <summary>
             Predicates the specified predicate.
             </summary>
             <param name="predicate">The predicate.</param>
             The following code example demonstrates how to use
             a <b>Predicate</b> to a grid filters.
             <example>
             [View] 
             <para></para>
             <code lang="ASPX"><code><pre> &lt;%=Html.Grid&lt;Order&gt;("Grid1")
               .Datasource(Model)
            .Caption("Orders")
            .Filtering(f =&gt;
             {
                f.AllowFiltering(true);
                 f.FilterDescriptors(d =&gt;
                 {
                     d.Add(c =&gt; c.EmployeeID).FilterBy(Syncfusion.Linq.FilterType.Equals).FilterValue(5).Predicate(PredicateType.Or);
                     d.Add(c =&gt; c.EmployeeID).FilterBy(Syncfusion.Linq.FilterType.Equals).FilterValue(4);
                  });
              })
             %&gt;</pre></code>
             </code>
             </example>
             <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.GridFilterDescriptorBuilder`1.FilterBy(Syncfusion.Linq.FilterType)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.GridFilterDescriptorBuilder`1.FilterValue(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.GridFilterDescriptorBuilder`1.MatchCase(System.Boolean)" -->
        <member name="T:Syncfusion.Mvc.Grid.GridEditRenderer`1">
            <summary>
            Provides methods for initializing the Editing mode
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridEditRenderer`1.#ctor(System.String,Syncfusion.Mvc.Grid.GridPropertiesModel{`0},System.Web.Mvc.HtmlHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridEditRenderer`1"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="gridModel">The grid model.</param>
            <param name="helper">The helper.</param>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridEditRenderer`1.htmlHelper">
            <summary>
            Stores the html helper instance
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridEditRenderer`1.GetEditForms">
            <summary>
            Gets the edit forms.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridEditRenderer`1.GridModel">
            <summary>
            Gets or sets the grid model.
            </summary>
            <value>The grid model.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridEditRenderer`1.GridID">
            <summary>
            Gets or sets the grid ID.
            </summary>
            <value>The grid ID.</value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridFiltersRenderer`1">
            <summary>
            Provides methods for renders the filter elements
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPager`1.HtmlHelper">
            <summary>
            Gets or sets the HTML helper.
            </summary>
            <value>The HTML helper.</value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridRenderer`1">
            <summary>
            Provides methods for Renders the Grid contents
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridRenderer`1.#ctor(System.String,Syncfusion.Mvc.Grid.GridPropertiesModel{`0},System.Web.Mvc.HtmlHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridRenderer`1"/> class.
            </summary>
            <param name="Id">The id.</param>
            <param name="gridmodel">The gridmodel.</param>
            <param name="helper">The helper.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridRenderer`1.#ctor(System.String,Syncfusion.Mvc.Grid.GridPropertiesModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridRenderer`1"/> class.
            </summary>
            <param name="Id">The id.</param>
            <param name="gridmodel">The gridmodel.</param>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridRenderer`1.grid">
            <summary>
            Stores the Grid tag
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridRenderer`1.engine">
            <summary>
            GridDataEngine object instance
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridRenderer`1.attributes">
            <summary>
            Used to set the attributes in querycell info event
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridRenderer`1.toolbarModel">
            <summary>
            Grid toolbar model object instance
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridRenderer`1.rowIndex">
            <summary>
            The grid row index
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridRenderer`1.toolbar">
            <summary>
            Grid Toolbar object instance
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridRenderer`1.GenerateGroupingTable(System.Boolean)">
            <summary>
            Generates the grouping table.
            </summary>
            <param name="isHeaderRequired">if set to <c>true</c> [is header required].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridRenderer`1.Render">
            <summary>
            Renders this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridRenderer`1.RenderGroupDropArea">
            <summary>
            Renders the group drop area.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridRenderer`1.RenderCaption">
            <summary>
            Renders the caption.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridRenderer`1.RenderToolBarItem(System.String,System.String,Syncfusion.Mvc.Grid.ToolbarOptions)">
            <summary>
            Renders the tool bar item.
            </summary>        
            <param name="title">The Tool Tip title.</param>
            <returns>The Rendered String ToolBar Item</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridRenderer`1.RenderStackedRows(Syncfusion.Mvc.Grid.GridStackedRows{`0},System.Boolean)">
            <summary>
            Renders the stacked rows.
            </summary>
            <param name="Rows">The rows.</param>
            <param name="RenderRowHeaderCell">if set to <c>true</c> [render row header cell].</param>
            <returns>StackedHeaderRows</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridRenderer`1.StoreStackedColumns(System.Collections.Generic.List{Syncfusion.Mvc.Grid.GridStackedColumns{`0}},Syncfusion.Mvc.Grid.GridColumn{`0},System.Collections.Generic.List{System.String})">
            <summary>
            Stores the stacked columns.
            </summary>
            <param name="stackedColumns">The stacked columns.</param>
            <param name="gridColumn">The grid column.</param>
            <param name="StackedHeaders">The stacked headers.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridRenderer`1.RenderColumn(Syncfusion.Mvc.Shared.Html.HtmlTag,System.String,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)">
            <summary>
            Renders the column.
            </summary>
            <param name="StackedRow">The stacked row.</param>
            <param name="columnName">Name of the column.</param>
            <param name="ColSpanList">The col span list.</param>
            <param name="columnIndex">Index of the column.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridRenderer`1.RenderUnboundFields(Syncfusion.Mvc.Grid.GridColumn{`0})">
            <summary>
            Renders the unbound fields.
            </summary>
            <param name="column">The column.</param>
            <returns>HtmlTag</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridRenderer`1.RenderUnboundCell(Syncfusion.Mvc.Grid.GridCommands{`0})">
            <summary>
            Renders the unbound cell.
            </summary>
            <param name="cmd">The grid commands.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridRenderer`1.RenderUnboundItems(Syncfusion.Mvc.Grid.GridCommands{`0},Syncfusion.Mvc.Shared.Html.HtmlTag,System.String)">
            <summary>
            Renders the unbound items.
            </summary>
            <param name="cmd">The grid commands.</param>
            <param name="UnboundCell">The unbound cell.</param>
            <param name="ImageUrl">The image URL.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridRenderer`1.RenderRecordCell(Syncfusion.Mvc.Shared.Html.HtmlTag,`0,Syncfusion.Mvc.Grid.GridColumn{`0},System.Boolean,System.Int32)">
            <summary>
            Renders the record cell.
            </summary>
            <param name="recordRow">The record row.</param>
            <param name="data">The data.</param>
            <param name="column">The column.</param>
            <param name="isAlternate">if set to <c>true</c> [is alternate].</param>
            <param name="iterator">The iterator.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridRenderer`1.RenderColumnTemplate(Syncfusion.Mvc.Grid.GridColumn{`0},`0)">
            <summary>
            Rendering the template for the column
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridRenderer`1.PrimaryKeyValues">
            <summary>
            Gets or sets the primary key values.
            </summary>
            <value>The primary key values.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridRenderer`1.GridModel">
            <summary>
            Gets or sets the grid model.
            </summary>
            <value>The grid model.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridRenderer`1.HtmlHelper">
            <summary>
            Gets or sets the HTML helper.
            </summary>
            <value>The HTML helper.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridRenderer`1.ItemProperties">
            <summary>
            property descriptor collection
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridRenderer`1.GridCellRangeInfo">
            <summary>
            Gets or sets the grid cell range info.
            </summary>
            <value>
            The grid cell range info.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridRenderer`1.GridID">
            <summary>
            Gets or sets the grid ID.
            </summary>
            <value>The grid ID.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridRenderer`1.DataSource">
            <summary>
            Gets or sets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridRenderer`1.DataEngine">
            <summary>
            Gets or sets the data engine.
            </summary>
            <value>The data engine.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridRenderer`1.GridCss">
            <summary>
            Gets the grid CSS.
            </summary>
            <value>The grid CSS.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridRenderer`1.GridToolbarModel">
            <summary>
            Gets the grid toolbar model.
            </summary>
            <value>The grid toolbar model.</value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.MergeCellEventArgs`1">
            <summary>
            Class MergeCellEventArgs
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.MergeCellEventArgs`1.#ctor(Syncfusion.Mvc.Grid.GridTableCell{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.MergeCellEventArgs`1"/> class.
            </summary>
            <param name="gridCell">The grid cell.</param>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MergeCellEventArgs`1.GridCell">
            <summary>
            Gets or sets the grid cell.
            </summary>
            <value>
            The grid cell.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MergeCellEventArgs`1.RangeInfo">
            <summary>
            Gets or sets the range info.
            </summary>
            <value>
            The range info.
            </value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ResizeBuilder`1.#ctor(Syncfusion.Mvc.Grid.GridResizing)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.ResizeBuilder`1"/> class.
            </summary>
            <param name="resizing">The resizing.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ResizeBuilder`1.ResizeToFit(System.Boolean)">
            <summary>
            Resizes to fit.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ResizeBuilder`1.ClipContent(System.Boolean)">
            <summary>
            Clips the content.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridResizing">
            <summary>
            Specifies the settings to be used in Grid Resizing
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridResizing.ResizeToFit">
            <summary>
            Gets of sets whether the ResizeToFit is Enabled
            </summary>
            <value>
              <c>true</c> if [resize to fit]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridResizing.ClipContent">
            <summary>
            Gets of sets whether the ClipContent is Enabled
            </summary>
            <value>
              <c>true</c> if [clip content]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridDataEngine`1">
            <summary>
            Provides methods for to process the grid data source.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridDataEngine`1.groupKey">
            <summary>
            Used to set the group key and group level which is used in retriveing the group caption count
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridDataEngine`1.#ctor(Syncfusion.Mvc.Grid.GridPropertiesModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridDataEngine`1"/> class.
            </summary>
            <param name="gridModel">The grid model.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridDataEngine`1.RefreshDataEngine">
            <summary>
            Refreshes the data engine.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridDataEngine`1.IterateGroups(Syncfusion.Linq.GroupResult,Syncfusion.Mvc.Grid.Group{`0})">
            <summary>
            Iterates the groups.
            </summary>
            <param name="query">The query.</param>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridDataEngine`1.CreateRecord(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.List{Syncfusion.Mvc.Grid.Record{`0}})">
            <summary>
            Creates the record.
            </summary>
            <param name="source">The source.</param>
            <param name="records">The records.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridDataEngine`1.EnsureDatasource">
            <summary>
            Ensures the datasource.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridDataEngine`1.RefreshSummary(System.Linq.IQueryable)">
            <summary>
            Refreshes the summary.
            </summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridDataEngine`1.CalculateSummary(System.Linq.IQueryable,Syncfusion.Mvc.Grid.GridSummaryColumnDescriptor)">
            <summary>
            Calculates the summary.
            </summary>
            <param name="datasource">The datasource.</param>
            <param name="summaryColumn">The summary column.</param>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridDataEngine`1.ItemProperties">
            <summary>
            Gets or sets the Property descriptor collection for the data source
            </summary>
            <value>The item properties.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridDataEngine`1.GridModel">
            <summary>
            Gets or sets the grid model.
            </summary>
            <value>The grid model.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridDataEngine`1.TotalRecordsCount">
            <summary>
            Gets the total record count.
            </summary>
            <value>The total record count.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridDataEngine`1.Records">
            <summary>
            Gets or sets the records.
            </summary>
            <value>The records.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridDataEngine`1.Groups">
            <summary>
            Gets the groups.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridDataEngine`1.SummaryRows">
            <summary>
            Gets or sets the summary rows.
            </summary>
            <value>The summary rows.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridDataEngine`1.DisplayElements">
            <summary>
            Gets the display elements.
            </summary>
            <value>The display elements.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridDataEngine`1.DataSource">
            <summary>
            Gets or sets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridDataEngine`1.IsGrouped">
            <summary>
            Gets or sets a value indicating whether this instance is grouped.
            </summary>
            <value>
            	<c>true</c> if this instance is grouped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEditingBuilder`1.ExternalForm(System.Action{Syncfusion.Mvc.Grid.IGridExternalFormBuilder{`0}})">
            <summary>
            Externals the EditForm.
            </summary>
            <param name="externalform">The externalform.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEditingBuilder`1.TimeSpan(System.Int32)">
            <summary>
            The time(in ms) after which the updated bulk data is saved automatically when edit mode is set to AutoExcel
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEditingBuilder`1.ExternalModeEditorTemplate(System.String)">
            <summary>
            Externals the mode editor template for ExternalEdit Mode.
            </summary>
            <param name="editFormTemplate">The edit form template.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.IGridExternalFormBuilder`1">
            <summary>
            Interface for ExternalForm Editing
            </summary>
            <typeparam name="T">Position and TargerID</typeparam>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridExternalForm`1">
            <summary>
            Specifies the ExternalForm settings 
            </summary>
            <typeparam name="T">GridEditing</typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridExternalForm`1.Position(Syncfusion.Mvc.Grid.ExternalFormPosition)">
            <summary>
            Positions the specified position.
            </summary>
            <param name="position">The position.</param>
            <returns>Position of the Externalform</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridExternalForm`1.TargetID(System.String)">
            <summary>
            Targets the ID.
            </summary>
            <param name="targetID">The target ID.</param>
            <returns>TargerElement ID for Placing ExternalForm</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.EditingBuilder`1.ExternalForm(System.Action{Syncfusion.Mvc.Grid.IGridExternalFormBuilder{`0}})">
            <summary>
            Externals the form.
            </summary>
            <param name="externalform">The externalform.</param>
            <returns>ExternalForm Settings</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.EditingBuilder`1.ExternalModeEditorTemplate(System.String)">
            <summary>
            Externals the mode editor template.
            </summary>
            <param name="editFormTemplate">The edit form template.</param>
            <returns>ExternalEditFormTemplate</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridBuilder`1.StackedHeader(System.Action{Syncfusion.Mvc.Grid.GridStackedHeaderBuilder{`0}})">
            <summary>
            Stackeds the header.
            </summary>
            <param name="stackedRows">The stacked rows.</param>
            <returns>StackedHeader</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridBuilder`1.ShowStackedHeader(System.Boolean)">
            <summary>
            Shows the stacked header.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
            <returns>stacked header</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridBuilder`1.AllowMergeCells(System.Boolean)">
            <summary>
            Allows the merge cells.
            </summary>
            <param name="isMergeCell">if set to <c>true</c> [is merge cell].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridBuilder`1.MergeCells(System.Collections.Generic.List{System.String})">
            <summary>
            Merges the cells
            </summary>
            <param name="Formula">The formula.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridBuilder`1.Summaries(System.Action{Syncfusion.Mvc.Grid.GridSummariesBuilder{`0}})">
            <summary>
            Summaries is the action which is used to add the summary row descriptors to the GridModel
            </summary>
            <param name="ClientSideEvents"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridBuilder`1.ConditionalFormats(System.Action{Syncfusion.Mvc.Grid.GridCondtionalFormatBuilder{`0}})">
            <summary>
            ConditionalFormats is the action which is used to add the Conditional format descriptors to the GridModel
            </summary>
            <param name="ClientSideEvents"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridBuilder`1.MergeCellInfo(System.Action{Syncfusion.Mvc.Grid.GridPropertiesModel{`0},Syncfusion.Mvc.Grid.MergeCellEventArgs{`0}})">
            <summary>
            Merges the cell info.
            </summary>
            <param name="cell">The cell.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridBuilder`1.ChildGrid(System.Action{Syncfusion.Mvc.Grid.ChildGridTemplateBuilder{`0}})">
            <summary>
            sets the child Grid if you need Hieracrhial relationship
            </summary>
            <param name="Template">ChildGridTemplate</param>
            <returns>IGridBuilder</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridBuilder`1.FrozenColumns(System.Int32)">
            <summary>
            Gets or sets the FrozenColumns property which freezes the number of columns from left side.
            </summary>
            <param name="FrozenRows">int</param>
            <returns>IGridBuilder</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridBuilder`1.FrozenRows(System.Int32)">
            <summary>
            Gets or sets the FrozenRows property which freezes the number of Rows from top.
            </summary>
            <param name="FrozenRows">int</param>
            <returns>IGridBuilder</returns>        
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridBuilder`1.Width(System.Int32)">
            <summary>
            Gets or sets the Width property which sets the width of the Grid Content.
            </summary>
            <param name="width">int</param>
            <returns>IGridBuilder</returns>  
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridBuilder`1.Height(System.Int32)">
            <summary>
            Gets or sets the Height property which sets the height of the Grid Content.
            </summary>
            <param name="height">int</param>
            <returns>IGridBuilder</returns>  
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridBuilder`1.WebService(System.String)">
            <summary>
            Gets or sets the url for webservice data binding
            </summary>
            <param name="url">string</param>
            <returns>IGridBuilder</returns>  
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridBuilder`1.EnableContextMenu">
            <summary>
            Gets or sets a value indicating whether ContextMenu is enabled.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>More user interaction can be done using context menu after enabling this 
            property.</description></item></list>
            </remarks>
            <value>
            true if the <b>EnableContextMenu </b>feature is enabled; otherwise,
            false. The default is false.
            </value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridBuilder`1.ContextMenuItems(System.Action{Syncfusion.Mvc.Grid.GridContextMenuItemsBuilder{`0}})">
            <summary>
            Modifying the list of contextmenu items
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>More user interaction can be done using context menu after enabling this 
            property.</description></item></list>
            </remarks>
            <value>
            true if the <b>EnableContextMenu </b>feature is enabled; otherwise,
            false. The default is false.
            </value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridBuilder`1.AllowKeyboardNavigation(System.Boolean)">
            <summary>
            gets or sets whether keyboard navigation is allowed in GridProperties Model or not        
            </summary>
            <remarks>
            ByDefault allowkeyboardnavigation is true
            </remarks>
            <value>
            boolean true or false. if true, keyboard shortcuts will work else it will not work
            </value>
            <example>
            The following example demonstrates how to use <b>AllowKeyboardNavigation</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.AllowKeyboardNavigation = &quot;false&quot;;</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridBuilder`1.AllowAutoWrap(System.Boolean)">
            <summary>
            Gets or sets whether the AutoWrap is enabled
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
            <returns></returns>
            <remarks>
            by default AllowAutoWrap is false.
            </remarks>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridBuilder`1.AllowSearching(System.Boolean)">
            <summary>
            Gets or sets whether the AllowSearching is enabled
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
            <returns></returns>
            <remarks>
            by default AllowSearching is false.
            </remarks>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridBuilder`1.AllowSummaries(System.Boolean)">
            <summary>
            Gets or sets whether the AllowSummaries is enabled
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
            <returns>by default AllowSummaries is false
            </returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridBuilder`1.StackedHeader(System.Action{Syncfusion.Mvc.Grid.GridStackedHeaderBuilder{`0}})">
            <summary>
            Stackeds the header
            </summary>
            <param name="colum">The colum.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridBuilder`1.ShowStackedHeader(System.Boolean)">
            <summary>
            Gets or sets wheter the Stacked header is enabled
            </summary>
            <param name="colum">The colum.</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridBuilder`1.ResizeSettings(System.Action{Syncfusion.Mvc.Grid.IResizeBuilder{`0}})">
            <summary>
            gets or sets whether the ResizeSettings is Enabled
            </summary>
            <param name="ResizeSettings">The resize settings.</param>
            <returns>boolean true or false</returns>
            <remarks>
            by Default ResizeSettings is False. if true the ResizeToFit and ClipContent can be enabled by setting the corresponding property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridBuilder`1.MergeCellInfo(System.Action{Syncfusion.Mvc.Grid.GridPropertiesModel{`0},Syncfusion.Mvc.Grid.MergeCellEventArgs{`0}})">
            <summary>
            Called when merging the grid cells 
            </summary>
            <param name="mergeCell">The merge cell.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.GridBuilder`1.KeyConfigurator(System.Action{Syncfusion.Mvc.Grid.IKeyConfigurator{`0}})" -->
        <member name="M:Syncfusion.Mvc.Grid.GridBuilder`1.AllowMergeCells(System.Boolean)">
            <summary>
            Allows the merge cells.
            </summary>
            <param name="isMergeCell">if set to <c>true</c> [is merge cell].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridBuilder`1.EnableAlternateRowStyling">
            <summary>
            Enables the alternate row styling.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridBuilder`1.ViewContext">
            <summary>
            Gets or sets the view context 
            </summary>
            <value>view context.</value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.GenerateDataColumns">
            <summary>
            Genereate Auto data columns for the grid
            </summary>
            <param name="CellEditType">CellEditType</param>
            <returns>IGridColumnBuilder</returns>     
            <example>
            The following code example demonstrates how to use
            a <b>GenearteDataColumns</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=>{
               c.GenearteDataColumns(); 
            })
            %>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.TemplateColumn(System.Boolean)">
            <summary>
            Sets whether the column is template column or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.TemplateName(System.String)">
            <summary>
            Sets the name of the template.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.Visible(System.Boolean)">
            <summary>
            Sets whether the column is visible or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.AllowContextMenu(System.Boolean)">
            <summary>
            Sets whether the column allows contextmenu (while contextmenu is enabled).
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.HtmlEncode(System.Boolean)">
            <summary>
            Sets whether the column is visible or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.AllowEditing(System.Boolean)">
            <summary>
            Sets whether the column is editable or not (while editing is enabled).
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.ResizeSettings(System.Boolean)">
            <summary>
            Sets whether the ResizeToFit and ClipContent on column is enabled.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.AllowAutoWrap(System.Boolean)">
            <summary>
            Sets whether the column will automatically wraped when content exceeds the column cells.
            </summary>
            
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.CellEditType(Syncfusion.Mvc.Grid.CellEditType)">
            <summary>
            Sets the CellEditType of specified column
            </summary>
            <param name="CellEditType">CellEditType</param>
            <returns>IGridColumnBuilder</returns>       
            <remarks>
            <para>The <b>Grid</b> Column has the property CellEditType, by that you can set
            the  CellEditType such as DropdownEdit, BooleanEdit, NumericEdit, PercentEdit, MaskEdit.
            using this property.</para>
            <para>By default it sets according to the ColumnType.</para>
            </remarks>
            <example>
            The following code example demonstrates how to use
            a <b>CellEditType</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=>{
               c.Add(m=>m.UniversityCode).CellEditType(CellEditType.NumericEdit)
            })
            %>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.DropDownDataSource(System.Collections.IEnumerable)">
            <summary>
            Sets the DropDownDataSource of specified column
            </summary>
            <param name="CellEditType">DropDownDataSource</param>
            <returns>IGridColumnBuilder</returns>       
            <remarks>
            <para>The <b>Grid</b> Column has the property DropDownDataSource, by that you can set
            the  Datasource for the Dropdown.
            using this property.</para>       
            </remarks>
            <example>
            The following code example demonstrates how to use
            a <b>DropDownDataSource</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=>{
               c.Add(m=>m.UniversityCode).DropDownDataSource(datasource)
            })
            %>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.DropDownDataSource(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Sets the DropDownDataSource, text and value for the specified column
            </summary>
            <param name="CellEditType">DropDownDataSource</param>
            <returns>IGridColumnBuilder</returns>       
            <remarks>
            <para>The <b>Grid</b> Column has the property DropDownDataSource, by that you can set
            the  Datasource for the Dropdown and bind the text and value field.
            using this property.</para>       
            </remarks>
            <example>
            The following code example demonstrates how to use
            a <b>DropDownDataSource</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=>{
               c.Add(m=>m.UniversityCode).DropDownDataSource(dropDownDataSource,dataTextField,dataValueField)
            })
            %>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.DropDownDataSource(System.String)">
            <summary>
            Sets the mapper for the specified column
            </summary>
            <param name="CellEditType">DropDownDataSource</param>
            <returns>IGridColumnBuilder</returns>       
            <remarks>
            <para>The <b>Grid</b> Column has the property DropDownDataSource, by that you can set
            the  mapping field for the Dropdown 
            using this property.</para>       
            </remarks>
            <example>
            The following code example demonstrates how to use
            a <b>DropDownDataSource</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=>{
               c.Add(m=>m.UniversityCode).DropDownDataSource(actionName)
            })
            %>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.DropDownDataSource(System.String,System.String,System.String)">
            <summary>
            Sets the mapper, text and value for the specified column
            </summary>
            <param name="CellEditType">DropDownDataSource</param>
            <returns>IGridColumnBuilder</returns>       
            <remarks>
            <para>The <b>Grid</b> Column has the property DropDownDataSource, by that you can set
            the  mapping field for the Dropdown and bind the text and value field.
            using this property.</para>       
            </remarks>
            <example>
            The following code example demonstrates how to use
            a <b>DropDownDataSource</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=>{
               c.Add(m=>m.UniversityCode).DropDownDataSource(actionName,dataTextField,dataValueField)
            })
            %>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.DropDownDataSource(System.Array)">
            <summary>
            Sets the DropDownDataSource of specified column
            </summary>
            <param name="CellEditType">DropDownDataSource</param>
            <returns>IGridColumnBuilder</returns>       
            <remarks>
            <para>The <b>Grid</b> Column has the property DropDownDataSource, by that you can set
            the  array  for the Dropdown.
            using this property.</para>       
            </remarks>
            <example>
            The following code example demonstrates how to use
            a <b>DropDownDataSource</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=>{
               c.Add(m=>m.UniversityCode).DropDownDataSource(data)
            })
            %>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.NumericEditParams(System.Action{Syncfusion.Mvc.Shared.INumericTextBoxBuilder})">
            <summary>
            Sets NumericEditParams when the CellEditType is NumericEditType
            </summary>
            <see cref="T:Syncfusion.Mvc.Shared.NumericTextBoxModel"/>
            <remarks>
            <para>The <b>Grid</b> Column has the property NumericEditParams which is nothing but the
            NumericTextBoxModel. By that if celledittype is numericedit, we can set the NumericTextBoxModel 
            using this property.</para>
            </remarks>
            <example>
            The following code example demonstrates how to use the constructor to
            dynamically add a <b>NumericEditParams</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=&gt;{
                NumericTextBoxModel model = new NumericTextBoxModel();
                model.IncrementStep = 2;
               c.Add(m=&gt;m.UniversityCode).NumericEditParams(model);
            })
            %&gt;
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.PercentEditParams(System.Action{Syncfusion.Mvc.Shared.IPercentTextBoxBuilder})">
            <summary>
            Gets or sets PercentEditParams when the CellEditType is PercentEditType
            </summary>
            <see cref="T:Syncfusion.Mvc.Shared.MaskEditTextBoxModel"/>
            <remarks>
            <para>The <b>Grid</b> Column has the property MaskEditParams which is nothing but the
            MaskEditTextBoxModel. By that if celledittype is maskedit, we can set the MaskEditTextBoxModel 
            using this property.</para>
            </remarks>
            <example>
            The following code example demonstrates how to use the constructor to
            dynamically add a <b>MaskEditParams</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=&gt;{
                PercentTextBoxModel model = new PercentTextBoxModel();
                model.IncrementStep = 2;
               c.Add(m=&gt;m.UniversityCode).PercentEditParams(model);
            })
            %&gt;
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.MaskEditParams(System.Action{Syncfusion.Mvc.Shared.IMaskEditTextBoxBuilder})">
            <summary>
            Gets or sets MaskEditParams when the CellEditType is MaskEditType
            </summary>
            <see cref="T:Syncfusion.Mvc.Shared.MaskEditTextBoxModel"/>
            <remarks>
            <para>The <b>Grid</b> Column has the property MaskEditParams which is nothing but the
            MaskEditTextBoxModel. By that if celledittype is maskedit, we can set the MaskEditTextBoxModel 
            using this property.</para>
            </remarks>
            <example>
            The following code example demonstrates how to use the constructor to
            dynamically add a <b>MaskEditParams</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=&gt;{
                MaskEditTextBoxModel model = new MaskEditTextBoxModel();
                model.Mask = "aaaaa";
               c.Add(m=&gt;m.UniversityCode).MaskEditParams(model);
            })
            %&gt;
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridColumnBuilder`1.AllowFormatinEditMode(System.Boolean)">
            <summary>
            Gets or sets Mask String when the celltype is mask
            </summary>
            <see cref="T:Syncfusion.Mvc.Shared.MaskEditTextBoxModel"/>
            <remarks>
            <para>The <b>Grid</b> Column has the property MaskEditParams which is nothing but the
            MaskEditTextBoxModel. By that if celledittype is maskedit, we can set the MaskEditTextBoxModel 
            using this property.</para>
            </remarks>
            <example>
            The following code example demonstrates how to use the constructor to
            dynamically add a <b>MaskEditParams</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=&gt;{
               c.Add(m=&gt;m.UniversityCode).AllowFormatinEditMode(false);
            })
            %&gt;
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IRootGridColumnBuilder`1.Add(System.String,System.Action{Syncfusion.Mvc.Grid.GridUnboundColumnBuilder{`0}})">
            <summary>
            Adds grid unbound column the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="column">The unbound column.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Mvc.Grid.CellEditType" -->
        <member name="F:Syncfusion.Mvc.Grid.CellEditType.StringEdit">
            <summary>
            StringEdit, Default
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CellEditType.BooleanEdit">
            <summary>
            BooleanEdit
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CellEditType.NumericEdit">
            <summary>
            NumericEdit
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CellEditType.PercentEdit">
            <summary>
            PercentEdit
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CellEditType.MaskEdit">
            <summary>
            MaskEdit
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CellEditType.DateTimeEdit">
            <summary>
            DateTimeEdit
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CellEditType.DropdownEdit">
            <summary>
            DropdownEdit
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.TextAlignment">
            <summary>
            Text alignment for Grid Cells
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.TextAlignment.Default">
            <summary>
            Default Alignment of Grid theme
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.TextAlignment.Left">
            <summary>
            Left Alignment
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.TextAlignment.Center">
            <summary>
            Center Alignment
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.TextAlignment.Right">
            <summary>
            Right Alignment
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumn`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridColumn`1"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.ColumnDelegate">
            <summary>
            Delegate that will be invoked on each item in the in the datasource in order to obtain the current item's value.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.MappingName">
             <summary>
            Gets or sets name of the column
             </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.TemplateColumn">
            <summary>
            Gets or sets the whether the column is template column or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.TemplateName">
            <summary>
            Gets or sets the name of the template.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.AllowEditing">
            <summary>
            Sets whether the column is editable or not (while editing is enabled).
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.ResizeSettings">
            <summary>
            Sets whether the ResizeToFit and ClipContent on column is enabled.
            </summary>
            <remarks>
            ResizeToFit and ClipContent is possible when this property is true. default value is false.
            </remarks>
            <example>
            The following code example demonstrates how to use
            <para>////Set the Grid object's properties.</para>       
            <para>.ResizeSettings(resize=>{resize.ResizeToFit(true);resize.ClipContent(true)});</para>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.AllowAutoWrap">
            <summary>
            Gets of sets whether AllowAutoWrap is enabled.
            </summary>
            <remarks>
            Content will wrap to the next line if the content exceeds the boundary of the Column Cells
            </remarks>
            <example>
            The following code example demonstrates how to use
            <para>////Set the Grid object's properties.</para>       
            <para>.AllowAutoWrap(true);</para>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.TextAlign">
            <summary>
            Gets of sets whether text alignment.
            </summary>
            <value>
            The text align.
            </value>
            <example>
            The following code example demonstrates how to use
              <para>////Set the Grid object's properties.</para>
              <para>.TextAlign(true);</para>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.AllowFormatinEditMode">
            <summary>
            Gets or sets the AllowFormatinEditMode
            </summary>
            <remarks>
            If any format sets to the column, for editing format is needed or not.
            </remarks>
            <example>
            The following code example demonstrates how to use
            a <b>CellEditType</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            <para>GridColumn<typeparam name="T"></typeparam> column = new GridColumn<typeparam name="T"></typeparam>();</para>
            <para></para>
            <para>////Set the Grid object's properties.</para>       
            <para>column.AllowFormatinEditMode = false;</para>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.Format">
             <summary>
            Gets or sets Custom format for the column.
             </summary>        
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.HeaderText">
            <summary>
            Gets or sets HeadetText displayed on the column header.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.CssClass">
            <summary>
            Gets or sets CssClass for the column.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.Width">
            <summary>
            Gets or sets Width for the column.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.CellEditType">
            <summary>
            Gets or sets CellEditType for the column.
            </summary>        
            <remarks>
            <para>The <b>Grid</b> Column has the property CellEditType, by that you can set
            the  CellEditType such as DropdownEdit, BooleanEdit, NumericEdit, PercentEdit, MaskEdit.
            using this property.</para> 
            <para>By default it sets according to the ColumnType.</para>
            </remarks>
            <example>
            The following code example demonstrates how to use
            a <b>CellEditType</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            <para>GridColumn<typeparam name="T"></typeparam> column = new GridColumn<typeparam name="T"></typeparam>();</para>
            <para></para>
            <para>////Set the Grid object's properties.</para>       
            <para>column.CellEditType = CellEditType.DropdownEdit;</para>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.NumericEditParams">
            <summary>
            Gets or sets Mask String when the celltype is mask
            </summary>
            <see cref="T:Syncfusion.Mvc.Shared.NumericTextBoxModel"/>
            <remarks>
            <para>The <b>Grid</b> Column has the property NumericEditParams which is nothing but the
            NumericTextBoxModel. By that if celledittype is numericedit, we can set the NumericTextBoxModel 
            using this property.</para>
            </remarks>
            <example>
            The following code example demonstrates how to use the constructor to
            dynamically add a <b>NumericEditParams</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            <para>NumericTextBoxModel model = new NumericTextBoxModel();</para>
            <para></para>
            <para>////Set the Grid object's properties.</para>
            <para>model.Decimal = 3;</para>
            <para>column.NumericEditParams = model;</para>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.PercentEditParams">
            <summary>
            Gets or sets Mask String when the celltype is mask
            </summary>
            <see cref="T:Syncfusion.Mvc.Shared.PercentTextBoxModel"/>
            <remarks>
            <para>The <b>Grid</b> Column has the property PercentEditParams which is nothing but the
            PercentTextBoxModel. By that if celledittype is percentedit, we can set the PercentTextBoxModel 
            using this property.</para>
            </remarks>
            <example>
            The following code example demonstrates how to use the constructor to
            dynamically add a <b>NumericEditParams</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            <para>PercentTextBoxModel model = new PercentTextBoxModel();</para>
            <para></para>
            <para>////Set the Grid object's properties.</para>
            <para>model.Decimal = 3;</para>
            <para>column.PercentEditParams = model;</para>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.MaskEditParams">
            <summary>
            Gets or sets Mask String when the celltype is mask
            </summary>
            <see cref="T:Syncfusion.Mvc.Shared.MaskEditTextBoxModel"/>
            <remarks>
            <para>The <b>Grid</b> Column has the property MaskEditParams which is nothing but the
            MaskEditTextBoxModel. By that if celledittype is maskedit, we can set the MaskEditTextBoxModel 
            using this property.</para>
            </remarks>
            <example>
            The following code example demonstrates how to use the constructor to
            dynamically add a <b>MaskEditParams</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            <para>MaskEditTextBoxModel model = new MaskEditTextBoxModel();</para>
            <para></para>
            <para>////Set the Grid object's properties.</para>
            <para>model.Decimal = 3;</para>
            <para>column.MaskEditParams = model;</para>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.Visible">
            <summary>
            Gets or sets visibility for the column.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.AllowContextMenu">
            <summary>
            Gets or sets contextmenu for the column.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.HtmlEncode">
            <summary>
            Gets or sets Encode for the column.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.AllowFilter">
            <summary>
            Enables or disables filtering the column. All columns are filterable by default in filtering mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.AllowSearching">
            <summary>
            Enables or disables searching the column. All columns are searchable by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.AllowSorting">
            <summary>
            Enables or disables sorting the column. All columns are sortable by default in sorting mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.AllowDragging">
            <summary>
            Enables or disables dragging the column. All columns are dragging by default in dragging mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.AllowGrouping">
            <summary>
            Enables or disables grouping the column. All columns are groupable by default in grouping mode. .
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Mvc.Grid.GridColumn`1.ShowGroupDropArea" -->
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.IsUnbound">
            <summary>
            Enables or disables grouping the unbound column
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumn`1.Commands">
            <summary>
            Gets or sets the commands.
            </summary>
            <value>
            The commands.
            </value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridCommands`1">
            <summary>
            Specified the properties of Grid Commands which is used for editing via unbound column
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridCommands`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridCommands`1"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridCommands`1.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridCommands`1.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridCommands`1.CssClass">
            <summary>
            Gets or sets the CSS class.
            </summary>
            <value>
            The CSS class.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridCommands`1.ImageUrl">
            <summary>
            Gets or sets the image URL.
            </summary>
            <value>
            The image URL.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridCommands`1.Mapper">
            <summary>
            Gets or sets the mapper.
            </summary>
            <value>
            The mapper.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridCommands`1.ItemType">
            <summary>
            Gets or sets the type of the item.
            </summary>
            <value>
            The type of the item.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridCommands`1.ItemOption">
            <summary>
            Gets or sets the item option.
            </summary>
            <value>
            The item option.
            </value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.IGridCommandsBuilder`1">
            <summary>
            Interface for GridCommands
            </summary>
             /// <typeparam name="T">IGridCommandsBuilder</typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridCommandsBuilder`1.Command(Syncfusion.Mvc.Grid.CommandTypes)">
            <summary>
            Commands the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>CommandsBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridCommandsBuilder`1.Text(System.String)">
            <summary>
            Specifies the Text of the GridCommands.
            </summary>
            <param name="text">The text.</param>
            <returns>CommandsBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridCommandsBuilder`1.CssClass(System.String)">
            <summary>
            Specifies the css class.
            </summary>
            <param name="css">The css class.</param>
            <returns>CommandsBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridCommandsBuilder`1.ImageUrl(System.String)">
            <summary>
            Specifies the Image Url.
            </summary>
            <param name="url">The URL.</param>
            <returns>CommandsBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridCommandsBuilder`1.Mapper(System.String)">
            <summary>
            Mappers the specified mapper name.
            </summary>
            <param name="mapperName">Name of the mapper.</param>
            <returns>CommandsBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridCommandsBuilder`1.ItemType(Syncfusion.Mvc.Grid.UnBoundItemTypes)">
            <summary>
            Specifies the UnBoundItemTypes of gridcommands.
            </summary>
            <param name="item">The item.</param>
            <returns>CommandsBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridCommandsBuilder`1.ItemOption(Syncfusion.Mvc.Grid.UnboundItemOptions)">
            <summary>
            Specifies theUnboundItemOptions of gridcommands
            </summary>
            <param name="option">The option.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridCommandsBuilder`1">
            <summary>
            Class for GridCommandsBuilder
            </summary>
            <typeparam name="T">GridCommandsBuilder</typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridCommandsBuilder`1.#ctor(Syncfusion.Mvc.Grid.Grid{`0},Syncfusion.Mvc.Grid.GridCommands{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridCommandsBuilder`1"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="cmds">The GridCommands.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridCommandsBuilder`1.Command(Syncfusion.Mvc.Grid.CommandTypes)">
            <summary>
            Commands the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>CommandsBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridCommandsBuilder`1.Text(System.String)">
            <summary>
            Texts the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>CommandsBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridCommandsBuilder`1.CssClass(System.String)">
            <summary>
            CSSs the class.
            </summary>
            <param name="css">The CSS.</param>
            <returns>CommandsBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridCommandsBuilder`1.ImageUrl(System.String)">
            <summary>
            Images the URL.
            </summary>
            <param name="url">The URL.</param>
            <returns>CommandsBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridCommandsBuilder`1.ItemType(Syncfusion.Mvc.Grid.UnBoundItemTypes)">
            <summary>
            Items the type.
            </summary>
            <param name="item">The item.</param>
            <returns>CommandsBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridCommandsBuilder`1.ItemOption(Syncfusion.Mvc.Grid.UnboundItemOptions)">
            <summary>
            Items the option.
            </summary>
            <param name="option">The option.</param>
            <returns>CommandsBuilder instance</returns>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.IGridUnboundColumnBuilder`1">
            <summary>
            Interface for Gridcommands
            </summary>
            <typeparam name="T">IGridUnboundColumnBuilder</typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridUnboundColumnBuilder`1.Commands(System.Action{Syncfusion.Mvc.Grid.GridCommandsBuilder{`0}})">
            <summary>
            Commandses the specified commands.
            </summary>
            <param name="commands">The commands.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridUnboundColumnBuilder`1">
            <summary>
            Class for UnboundColumn builder
            </summary>
            <typeparam name="T">GridUnboundColumnBuilder</typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridUnboundColumnBuilder`1.#ctor(Syncfusion.Mvc.Grid.Grid{`0},Syncfusion.Mvc.Grid.GridColumn{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridUnboundColumnBuilder`1"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridUnboundColumnBuilder`1.Commands(System.Action{Syncfusion.Mvc.Grid.GridCommandsBuilder{`0}})">
            <summary>
            Commandses the specified commands.
            </summary>
            <param name="commands">The commands.</param>
            <returns>GridCommands</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.Format(System.String)">
            <summary>
            Used for Specifying the Format of the column
            </summary>
            <param name="format">String contains the format to be applied</param>
            <returns>ColumnBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.HeaderText(System.String)">
            <summary>
            Used to Specify the HeaderText of the column
            </summary>
            <param name="headerName">String contains the text to be displayed on the column header</param>
            <returns>ColumnBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.CssClass(System.String)">
            <summary>
            Used to Specify the Css class  of the column
            </summary>
            <param name="headerName">String contains the class to be format on the column</param>
            <returns>ColumnBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.Width(System.Int32)">
            <summary>
            Used to Specify the width  of the column
            </summary>
            <param name="headerName">Integer contains the width to column</param>
            <returns>ColumnBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.AllowFilter(System.Boolean)">
            <summary>
            Gets or set the allow filter property to column
            All columns are filterable by default in filter mode. 
            </summary>        
            <param name="enable">bool value indicates whether the filtering is enabled for this column.</param>
            <returns>ColumnBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.AllowSearching(System.Boolean)">
            <summary>
            Gets or set the Allow Searching property to column
            All columns are searchable by default in filter mode. 
            </summary>        
            <param name="enable">bool value indicates whether the searching is enabled for this column.</param>
            <returns>ColumnBuilder instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.AllowSorting(System.Boolean)">
            <summary>
            Gets or set the allow sorting property to column
            All columns are sortable by default in sorting mode. 
            </summary>        
            <param name="enable">bool value indicates whether the sorting is enabled for this column.</param>
            <returns>ColumnBuilder instance</returns>        
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.AllowDragging(System.Boolean)">
            <summary>
            Gets or set the allow dragging property to column
            All columns are draggable by default in dragging mode. 
            </summary>        
            <param name="enable">bool value indicates whether the dragging is enabled for this column.</param>
            <returns>ColumnBuilder instance</returns>        
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.AllowGrouping(System.Boolean)">
            <summary>
            Gets or set the allow unbound property to column
            </summary>        
            <param name="enable">bool value indicates whether the unbound is enabled for this column.</param>
            <returns>ColumnBuilder instance</returns>        
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.UnBound">
            <summary>
            Gets or set the allow grouping property to column
            All columns are grouping by default in grouping mode. 
            </summary>        
            <param name="enable">bool value indicates whether the grouping is enabled for this column.</param>
            <returns>ColumnBuilder instance</returns> 
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.UnBound(System.Boolean)">
            <summary>
            Gets or set the allow grouping property to column
            All columns are grouping by default in grouping mode. 
            </summary>        
            <param name="enable">bool value indicates whether the grouping is enabled for this column.</param>
            <returns>ColumnBuilder instance</returns> 
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.CellEditType(Syncfusion.Mvc.Grid.CellEditType)">
            <summary>
            sets the celledittype of each column
            </summary>
            <param name="CellEditType">CellEditType</param>
            <returns>IGridColumnBuilder</returns>       
            <remarks>
            <para>The <b>Grid</b> Column has the property CellEditType, by that you can set
            the  CellEditType such as DropdownEdit, BooleanEdit, NumericEdit, PercentEdit, MaskEdit.
            using this property.</para>
            <para>By default it sets according to the ColumnType.</para>
            </remarks>
            <example>
            The following code example demonstrates how to use
            a <b>CellEditType</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=>{
               c.Add(m=>m.UniversityCode).CellEditType(CellEditType.NumericEdit)
            })
            %>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Used to add colummns in Visble columns colection
            </summary>
            <param name="expression">Function Delegate</param>
            <returns>GridColumnInstance</returns>        
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.TemplateColumn(System.Boolean)">
            <summary>
            Sets the whether the column is template column or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.TemplateName(System.String)">
            <summary>
            Sets the name of the template
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.AllowEditing(System.Boolean)">
            <summary>
            Sets whether the column is editable or not (while editing is enabled).
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridColumnBuilder`1.columnflag">
            <summary>
            Used to create the auto generated columns.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.ResizeSettings(System.Boolean)">
            <summary>
            Sets whether the ResizeToFit and ClipContent on column is enabled.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.AllowAutoWrap(System.Boolean)">
            <summary>
            Sets whether the column will automatically wraped when content exceeds the column cells.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.TextAlign(Syncfusion.Mvc.Grid.TextAlignment)">
            <summary>
            Sets the text alignment to column
            </summary>
            <param name="textAlign">The text align.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Used to add colummns in Visble columns collection
            </summary>
            <param name="func">Function Delegate having Mapping Name</param>
            <param name="name">HeaderText</param>
            <returns>GridColumn instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.Add(System.String)">
            <summary>
            Adds the colummn in visible columns collection
            </summary>
            <param name="name">Column mapping name</param>
            <returns>GridColumn instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.Add(System.String,System.Action{Syncfusion.Mvc.Grid.GridUnboundColumnBuilder{`0}})">
            <summary>
            Adds the specified mapping name.
            </summary>
            <param name="mappingName">Name of the mapping.</param>
            <param name="column">The column.</param>
            <returns>GridColumn instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.Add(System.String,System.Boolean)">
            <summary>
            Adds the colummn in visible columns collection
            </summary>
            <param name="name">Column mapping name</param>
            <returns>GridColumn instance</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.ExpressionToName``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Grabs the property name from a member expression.
            </summary>
            <param name="expression">The expression</param>
            <returns>The name of the property</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.NumericEditParams(System.Action{Syncfusion.Mvc.Shared.INumericTextBoxBuilder})">
            <summary>
            Gets or sets Mask String when the celltype is mask
            </summary>
            <see cref="T:Syncfusion.Mvc.Shared.NumericTextBoxModel"/>
            <remarks>
            <para>The <b>Grid</b> Column has the property NumericEditParams which is nothing but the
            NumericTextBoxModel. By that if celledittype is numericedit, we can set the NumericTextBoxModel 
            using this property.</para>
            </remarks>
            <example>
            The following code example demonstrates how to use the constructor to
            dynamically add a <b>NumericEditParams</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=&gt;{
               c.Add(m=&gt;m.UniversityCode).NumericEditParams(new NumericTextBoxModel())
            })
            %&gt;
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.PercentEditParams(System.Action{Syncfusion.Mvc.Shared.IPercentTextBoxBuilder})">
            <summary>
            Gets or sets Mask String when the celltype is mask
            </summary>
            <see cref="T:Syncfusion.Mvc.Shared.PercentTextBoxModel"/>
            <remarks>
            <para>The <b>Grid</b> Column has the property PercentEditParams which is nothing but the
            PercentTextBoxModel. By that if celledittype is percentedit, we can set the PercentTextBoxModel 
            using this property.</para>
            </remarks>
            <example>
            The following code example demonstrates how to use the constructor to
            dynamically add a <b>NumericEditParams</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=&gt;{
               c.Add(m=&gt;m.UniversityCode).PercentEditParams(new PercentTextBoxModel())
            })
            %&gt;
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.MaskEditParams(System.Action{Syncfusion.Mvc.Shared.IMaskEditTextBoxBuilder})">
            <summary>
            Gets or sets Mask String when the celltype is mask
            </summary>
            <see cref="T:Syncfusion.Mvc.Shared.MaskEditTextBoxModel"/>
            <remarks>
            <para>The <b>Grid</b> Column has the property MaskEditParams which is nothing but the
            MaskEditTextBoxModel. By that if celledittype is maskedit, we can set the MaskEditTextBoxModel 
            using this property.</para>
            </remarks>
            <example>
            The following code example demonstrates how to use the constructor to
            dynamically add a <b>MaskEditParams</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=&gt;{
               c.Add(m=&gt;m.UniversityCode).MaskEditParams(new MaskEditTextBoxModel())
            })
            %&gt;
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.AllowFormatinEditMode(System.Boolean)">
            <summary>
            Gets or sets Mask String when the celltype is mask
            </summary>
            <see cref="T:Syncfusion.Mvc.Shared.MaskEditTextBoxModel"/>
            <remarks>
            <para>The <b>Grid</b> Column has the property MaskEditParams which is nothing but the
            MaskEditTextBoxModel. By that if celledittype is maskedit, we can set the MaskEditTextBoxModel 
            using this property.</para>
            </remarks>
            <example>
            The following code example demonstrates how to use the constructor to
            dynamically add a <b>MaskEditParams</b> to a grid column.
            <para></para>
            <para>//// Create a new Grid object. </para>
            &lt;%=Html.Grid<typeparamref name="Student"/>("MulticolumnControl1")
            .Columns(c=&gt;{
               c.Add(m=&gt;m.UniversityCode).AllowFormatinEditMode(false);
            })
            %&gt;
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridColumnBuilder`1.HtmlEncode(System.Boolean)">
             <summary>
            Gets or sets Encode of the column
             </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridColumnBuilder`1.Commands">
            <summary>
            Gets or sets the commands.
            </summary>
            <value>
            The commands.
            </value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridCondtionalFormatBuilder`1.Add(Syncfusion.Mvc.Grid.GridConditionalFormatDescriptor{`0})">
             <summary>
             Add single conditional format descriptor
             </summary>
             <typeparam name="TProperty">The type of the property.</typeparam>
             <param name="expression">The expression.</param>
             The following code example demonstrates how to use
             a <b>Predicate</b> to a grid conditional format.
             <example>
             [View] 
             <para></para>
             <code lang="ASPX"><code><pre> &lt;%=Html.Grid&lt;Order&gt;("Grid1")
               .Datasource(Model)
            .Caption("Orders")
            .ConditionalFormats(f
             {        
                 f.Add((GridConditionalFormatDescriptor)ViewData["descriptor"]);
              })
             </pre></code>
             </code>
             </example>
             <returns>IGridCondtionalFormatBuilder</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridCondtionalFormatBuilder`1.Add(System.Collections.Generic.IEnumerable{Syncfusion.Mvc.Grid.GridConditionalFormatDescriptor{`0}})">
             <summary>
             Adds the list of ConditionalFormat descriptor
             </summary>
             <typeparam name="TProperty">The type of the property.</typeparam>
             <param name="expression">The expression.</param>
             The following code example demonstrates how to use
             a <b>Predicate</b> to a grid conditional format.
             <example>
             [View] 
             <para></para>
             <code lang="ASPX"><code><pre> &lt;%=Html.Grid&lt;Order&gt;("Grid1")
               .Datasource(Model)
            .Caption("Orders")
            .ConditionalFormats(f
             {        
                 f.Add((IEnumerable&lt;GridConditionalFormatDescriptor&gt;)ViewData["descriptors"]);
              })
             </pre></code>
             </code>
             </example>
             <returns>GridCondtionalFormatBuilder</returns>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridEditing">
            <summary>
            Specifies the settings to be used in Grid Editing
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridEditing.FormModeEditorTemplate">
            <summary>
            Gets or sets FormModeEditorTemplate name
            </summary>
            <remarks>
            Specifies the Id of the FormModeTemplate which is going to be applied to the Grid
            control in inline form editing mode.
            <para></para>
            <para>Templete is applied in the callbacks only not in the initial load.</para>
            </remarks>
            <value>
            String represents the Id of the <b>FormModeEditorTemplate</b>
            </value>
            <example>
            The following example demonstrates how to use <b>FormModeTemplate</b> property in
            EditingMode. 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel(); 
            gridModel.Editing.FormModeEditorTemplate = &quot;OrderEditForm&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridEditing.DialogModeEditorTemplate">
            <summary>
            Gets or sets DialogModeEditorTemplate name
            </summary>
            <remarks>
            Specifies the Id of the DialogModeTemplate which is going to be applied to the Grid
            control in Dialog editing mode.
            <para></para>
            <para>Templete is applied in the callbacks only not in the initial load.</para>
            </remarks>
            <value>
            String represents the Id of the <b>DialogModeEditorTemplate</b>
            </value>
            <example>
            The following example demonstrates how to use <b>DialogModeTemplate</b> property in
            EditingMode. 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel(); 
            gridModel.Editing.DialogModeEditorTemplate = &quot;OrderEditForm&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridEditing.ExternalModeEditorTemplate">
            <summary>
            Gets or sets ExternalModeEditorTemplate name
            </summary>
            <remarks>
            Specifies the Id of the ExternalModeEditorTemplate which is going to be applied to the Grid
            control in Externalform editing mode.
            <para></para>
            <para>Templete is applied in the callbacks only not in the initial load.</para>
            </remarks>
            <value>
            String represents the Id of the <b>ExternalModeEditorTemplate</b>
            </value>
            <example>
            The following example demonstrates how to use <b>ExternalModeEditorTemplate</b> property in
            EditingMode. 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel(); 
            gridModel.Editing.ExternalModeEditorTemplate = &quot;OrderEditForm&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridEditing.Dialog">
            <summary>
            Gets or sets the dialog while edit mode is set to Dialog or DialogTemplate
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridEditing.ExternalForm">
            <summary>
            Gets or sets the external form.
            </summary>
            <value>
            The external form.
            </value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.ExternalForm">
            <summary>
            Specifies setting to be used for ExternalForm editing
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ExternalForm.TargetID">
            <summary>
            Gets or sets the target ID.
            </summary>
            <value>
            The target ID.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ExternalForm.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridFiltering.FilterMode">
            <summary>
            Gets or sets the filter mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridFiltering.FilterBarMode">
            <summary>
            Gets or sets the filter bar mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridFiltering.ShowFilterStatusMessage">
            <summary>
            Gets or sets a value indicating whether the filter msg status bar is shown or not when filter mode is set to filterbar..
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridFiltering.FilterStatusBarWidth">
            <summary>
            Gets or sets a value indicating whether the filter msg status bar is shown or not when filter mode is set to filterbar..
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridGrouping.ShowGroupDropArea">
            <summary>
            Sets whether the grouped droparea will be enabled or not
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridGrouping.IsExpanded">
            <summary>
            Sets whether the grouped items will be expanded or not
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridGrouping`1.AllowGrouping(System.Boolean)">
            <summary>
            Sets whether grouping is enabled or not
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridGrouping`1.AllowFormatGrouping(System.Boolean)">
            <summary>
            Sets whether formatted grouping is enabled or not
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridGrouping`1.ShowGroupDropArea(System.Boolean)">
            <summary>
            Sets whether grouping droparea is visible or not
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridGrouping`1.IsExpanded(System.Boolean)">
            <summary>
            Sets whether the grouped items will be expanded or not
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridGroupingBuilder`1.AllowGrouping(System.Boolean)">
            <summary>
            Sets whether grouping is enabled or not
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridGroupingBuilder`1.AllowFormatGrouping(System.Boolean)">
            <summary>
            Sets whether format grouping is enabled or not
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridGroupingBuilder`1.ShowGroupDropArea(System.Boolean)">
            <summary>
            Sets whether grouping droparea is visible or not
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridGroupingBuilder`1.IsExpanded(System.Boolean)">
            <summary>
            Sets whether the grouped items will be expanded or not
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridPropertiesModel`1">
            <summary>
            Contains all properties and Events of the <b>Grid</b> control.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>Contains all properties and Events of the <b>Grid</b> control.
            </description></item>
            <item>
            <description></description></item>
            <item>
            <description>Contains <b>QueryCellInfo </b>action for Cell
            Customization.</description></item>
            <item>
            <description></description></item>
            <item>
            <description>Contains <b>TableDescriptor</b> property which returns
            <b>TableDescriptor</b> object, it  maintains the table schema
            information.</description></item>
            <item>
            <description><b>Grid </b>control has  model property, it must be set to render
            the Grid</description></item></list>
            </remarks>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridPropertiesModel`1.#ctor">
            <summary>
            Initializes a new instance of the Model class.
            </summary>
            <example>
            The following code example demonstrates how to use the constructor to 
            <para> add a &lt;b&gt;Grid&lt;/b&gt; control. </para>
            <para></para>
            <para><c> ////Create a new &lt;b&gt;Model&lt;/b </c><code lang="C#">object.</code></para>
            <para></para>
            <para><code lang="C#"> GridPropertiesModel gridModel = new GridPropertiesModel();</code></para>
            <para></para>
            <para> <c>////Set the &lt;b&gt;Model&lt;/b&gt; object's properties.  </c></para>
            <code lang="C#"> gridModel.DataSource =SqlCE.Orders.Skip(0).Take(20),
             gridModel.SkinName =&quot;Syncfusion-Grid-Office2007Black&quot;,
             gridModel.ActionMode = &quot;Server&quot;,
             gridModel.Caption = &quot;Orders&quot;,
             gridModel.HeaderText = { &quot;Order ID&quot;}</code>
            <para></para>
            <para></para> <c>//// store the <b>Model </b>object in view data in order to access it in View. </c>
            <para>  <code lang="C#">ViewData[&quot;GridModel&quot;] = gridModel;</code>
            </para>
            <para></para>
            <para><c>////This following code example from Corresponding view  Generated the ///<b>Grid</b> control.</c></para>
            <para></para>
            <para> <c>&lt;%Html.Grid(&quot;MvcGridServerMode&quot;, &quot;GridModel&quot;); %&gt;</c></para>
            </example>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridPropertiesModel`1.autoformat">
            <summary>
            Used to store Autoformat
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridPropertiesModel`1.allowSelection">
            <summary>
            Stores AllowSelection
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridPropertiesModel`1.allowRowHeader">
            <summary>
            Stores RowHeader
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridPropertiesModel`1.enableLegacySettings">
            <summary>
            Stores EnableLegacySettings
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridPropertiesModel`1.allowResizing">
            <summary>
            stores AllowResizing
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridPropertiesModel`1.allowAutoWrap">
            <summary>
            stores AllowAutoWrap
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridPropertiesModel`1.enableRowHover">
            <summary>
            stores enableRowHover
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridPropertiesModel`1.allowDragnDrop">
            <summary>
            stores Allow DragnDrop
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridPropertiesModel`1.allowSearching">
            <summary>
            stores Allow Searching
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridPropertiesModel`1.headerText">
            <summary>
            HeaderText object
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridPropertiesModel`1.enableOnDemand">
            <summary>
            EnableOnDemand field
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridPropertiesModel`1.RaiseMergeCellInfoAction(Syncfusion.Mvc.Grid.GridPropertiesModel{`0},Syncfusion.Mvc.Grid.MergeCellEventArgs{`0},Syncfusion.Mvc.Shared.Html.HtmlTag)">
            <summary>
            Raises the merge cell info action.
            </summary>
            <param name="gridModel">The grid model.</param>
            <param name="mergeCell">The merge cell.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridPropertiesModel`1.onMergeCellInfo(Syncfusion.Mvc.Grid.GridPropertiesModel{`0},Syncfusion.Mvc.Grid.MergeCellEventArgs{`0})">
            <summary>
            Ons the merge cell info.
            </summary>
            <param name="gridModel">The grid model.</param>
            <param name="mergeCell">The merge cell.</param>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.ChildGrid">
            <summary>
            Gets or Sets the Child Grid only if Hierarchical relationship is needed
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.ResizeSettings">
             <summary>
             Gets of Sets the ResizeSettings
             </summary>
            <remarks>
             ResizeSettings are ResizeToFit and ClipContent
            </remarks>
             <value>
             true if the ResizeSettings are enabled; otherwise, false. The default is
             true.
             </value>
             <example>
             The following code example demonstrates how to use the ResizeSettings property to
             declaratively enable the ResizeSettings(ResizeToFit and ClipContent) feature in the <b>Grid</b> control. 
             <para></para>
             <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
             gridModel.ResizeSettings(rs=>{rs=>ResizeToFit(true);rs.ClipContent(true)});</code>
             </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.RowsSelectionMode">
            <summary>
            gets or sets Rows Dragging Mode that to decide whether normal div is needed or shadow of that row is need.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.RowsDraggingMode">
            <summary>
            gets or sets Rows Dragging Mode that to decide whether normal div is needed or shadow of that row is need.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AllowRowsDragging">
            <summary>
            gets or sets whether Dragging need or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AllowColumnSelection">
            <summary>
            gets or sets whether Column selection need or not
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.Droppable">
            <summary>
            gets or sets grid row accept dropping or not
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AllowKeyboardNavigation">
            <summary>
            gets or sets whether keyboard navigation is allowed in GridProperties Model or not        
            </summary>
            <remarks>
            ByDefault allowkeyboardnavigation is true
            </remarks>
            <value>
            Boolean true or false. if true, keyboard shortcuts will work else it will not work
            </value>
            <example>
            The following example demonstrates how to use <b>AllowKeyboardNavigation</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.AllowKeyboardNavigation = &quot;false&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.EnableSelectionOnDragging">
            <summary>
            gets or sets grid row needs to be selected on dragging on row
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.EnableHighlighting">
            <summary>
            gets or sets that Highlighting is necessary or not
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.EnableLegacySettings">
            <summary>
            gets or sets that EnableLegacySettings is necessary or not
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.ElementtoDrag">
            <summary>
            gets or sets the selector of the element to drag
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.ColumnMinimumWidth">
            <summary>
            gets or sets whether Column Minimum width   
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.TargetHtmlElementId">
            <summary>
            gets or sets the selector for the target which we need to drop our grid rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.RowsDroppingMapper">
            <summary>
            gets or sets the mapper for the row dropping event
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AllowMergeCells">
            <summary>
            Gets or sets a value indicating whether [allow merge cells].
            </summary>
            <value>
              <c>true</c> if [allow merge cells]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.ClientSideRecordSelectionEvent">
            <summary>
            Gets or sets Handler name of the <b>ClientSideRecordSelectionEvent</b>
            </summary>
            <value>
            String represents the Handler name for <b>ClientSideRecordSelectEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>ClientSideRecordSelectionEvent
            </b> property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.ClientSideRecordSelectionEvent = &quot;OnRowSelect&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.OnGridRowDragEvent">
            <summary>
            Gets or sets Handler name of the <b>OnGridRowDragEvent</b>
            </summary>
            <value>
            String represents the Handler name for <b>OnGridRowDragEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnGridRowDragEvent
            </b> property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.OnGridRowDragEvent = &quot;OnElementDrag&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.OnGridRowsDropEvent">
            <summary>
            Gets or sets Handler name of the <b>OnGridRowsDropEvent</b>
            </summary>
            <value>
            String represents the Hanlder name for <b>OnGridRowsDropEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnGridRowsDropEvent
            </b> property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.OnGridRowsDropEvent = &quot;OnElementDrop&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.ClientSideRecordHoverEvent">
            <summary>
            Gets or sets Handler name of the ClientSideRecordHoverEvent
            </summary>
            <value>
            String represents the Hanlder name for <b>ClientSideRecordHoverEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>ClientSideRecordhoverEvent </b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.ClientSideRecordHoverEvent = &quot;OnRowHover&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.OnRowDragStarted">
            <summary>
            Gets or sets Handler name of the ClientSideRecordHoverEvent
            </summary>
            <value>
            String represents the Hanlder name for <b>ClientSideRecordHoverEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>ClientSideRecordhoverEvent </b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.OnRowDragStarted = &quot;OnRowsSelected&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.ClientSideRecordsUnselectionEvent">
            <summary>
            Gets or sets Handler name of the <b>ClientSideRecordsUnselectionEvent</b>
            </summary>
            <value>
            String represents the Hanlder name for <b>ClientSideRecordsUnselectionEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>ClientSideRecordsUnselectionEvent
            </b> property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.ClientSideRecordsUnselectionEvent = &quot;OnRowUnselect&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.OnRowDropping">
            <summary>
            Gets or sets Handler name of the ClientSideRecordHoverEvent
            </summary>
            <value>
            String represents the Hanlder name for <b>ClientSideRecordHoverEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>ClientSideRecordhoverEvent </b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.OnRowDropping = &quot;OnDroppingTarget&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.OnRowDropped">
            <summary>
            Gets or sets Handler name of the OnRowDropped
            </summary>
            <value>
            String represents the Hanlder name for <b>OnRowDropped</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnRowDropped </b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.OnRowDropped = &quot;OnDropTargetCompleted&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.ClientSideDoubleClickEvent">
            <summary>
            Gets or sets Handler name of the ClientSideDoubleClickEvent
            </summary>
            <value>
            String represents the Hanlder name for <b>ClientSideDoubleClickEvent</b>
            </value>
            <example>
            The following example demonstrates how to use <b>ClientSideDoubleClickEvent </b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.ClientSideDoubleClickEvent = &quot;OnRowDblClick&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.OnLoad">
            <summary>
            Gets or sets Handler name of the OnLoad event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnLoad</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnLoad </b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.OnLoad = &quot;OnLoad&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.OnActionFailure">
            <summary>
            Gets or sets Handler name of the OnActionFailure event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnActionFailure</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnActionFailure</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.OnActionFailure = &quot;OnGridActionFailure&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.OnActionBegin">
            <summary>
            Gets or sets Handler name of the OnActionBegin event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnActionBegin</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnActionBegin</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.OnActionBegin = &quot;OnGridActionBegin&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.OnActionSuccess">
            <summary>
            Gets or sets Handler name of the OnActionSuccess event
            </summary>
            <value>
            String represents the Hanlder name for <b>OnActionSuccess</b>
            </value>
            <example>
            The following example demonstrates how to use <b>OnActionSuccess</b>
            property 
            <para></para>
            <code lang="C#">GridPropertiesModel&lt;order&gt; gridModel = new GridPropertiesModel&lt;order&gt;();
            gridModel.OnActionSuccess = &quot;OnGridActionSuccess&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AllowSelection">
            <summary>
            Gets or sets a value indicating whether selection is enabled.
            </summary>
            <remarks>
            To Enable Selection Set <b>AllowSelection</b> property to true. 
            <para></para>
            <para>Columns can be selected by double-clicking their headers.</para>
            <para></para>
            <para>Rows can be selected either by clicking the row-header or any cell of the
            row.</para>
            <para></para>
            <para>The whole grid can be selected by clicking the cell at upper-left corner
            of the grid.</para>
            <para></para>
            <para>The ESC key is used to clear the selection.</para>
            <para></para>
            <para>Use SHIFT+ Arrow keys for continuous selection of consecutive rows for
            multiple selection.</para>
            <para></para>
            <para>Press the CTRL key and left-click to select random rows for multiple
            selection.</para>
            </remarks>
            <value>
            true if the selection feature is enabled; otherwise, false. The default is
            true.
            </value>
            <example>
            The following code example demonstrates how to use the AllowSelection property
            to enable the selection feature in the <b>Grid</b> control. 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.AllowSelection = true;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AllowResizing">
            <summary>
            Gets or sets a value indicating whether column resizing is enabled.
            </summary>
            <remarks>
            Column resizing can be enabled using the <b>AllowResizing</b> property. 
            <para></para>
            <para>Only horizontal resizing is allowed.</para>
            <para></para>
            <para>Resizing the column to lesser than its initial width is not
            possible.</para>
            </remarks>
            <value>
            true if the AllowResizing feature is enabled; otherwise, false. The default is
            true.
            </value>
            <example>
            The following code example demonstrates how to use the AllowResizing property to
            declaratively enable the column resizing feature in the <b>Grid</b> control. 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.AllowResizing = true;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AllowAutoWrap">
            <summary>
            Gets or sets a value indicating whether column Cells will wraped automatically.
            </summary>
            <remarks>
            AutoWrap of column cells can be enabled using the <b>AllowAutoWrap</b> property. 
            </remarks>
            <value>
            true if the AllowAutoWrap feature is enabled; otherwise, false. The default is
            true.
            </value>
            <example>
            The following code example demonstrates how to use the AllowAutoWrap property to
            declaratively enable the AutoWrap up column cells feature in the <b>Grid</b> control. 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.AllowAutoWrap = true;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.EnableRowHover">
            <summary>
            Gets or sets a value indicating whether enabling the Row Hover.
            </summary>
            <remarks>
            RowHover of rows can be enabled using the <b>EnableRowHover</b> property. 
            </remarks>
            <value>
            true if the EnableRowHover property is enabled; otherwise, false. The default is
            true.
            </value>
            <example>
            The following code example demonstrates how to use the EnableRowHover property to
            declaratively enable the RowHover up column cells in the <b>Grid</b> control. 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.EnableRowHover = true;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AllowDragAndDrop">
            <summary>
            Gets or sets a value indicating whether column drag and drop is enabled.
            </summary>
            <remarks>
            Drag the column header and Drop it on the some other column header. 
            <para></para>
            <para>Dragged column will be added before the target column.</para>
            <para></para>
            <para>To drop a column at  the last position, drag and drop the column on the
            last column, if the target is second half of the column the column will be added
            after the target column; otherwise it will added before the target column.
            </para>
            </remarks>
            <value>
            true if the DragAndDrop feature is enabled; otherwise, false. The default is
            true.
            </value>
            <example>
            The following code example demonstrates how to use the AllowDragAndDrop property
            to enable the column drag and drop feature in the <b>Grid</b> control. 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.AllowDragAndDrop = true;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AllowGrouping">
            <summary>
            Gets or sets a value indicating whether grouping is enabled.
            </summary>
            <remarks>
            To enable grouping set <b>AllowGrouping </b>property to true. Grouping allows
            you to categorize the records based on a specific column. 
            <para></para>
            <para>The user can simply drag and drop the column header that he/she wants to
            group by to a Group Drop Area located at the top of the grid,to group by a
            particular column.</para>
            <para></para>
            <para>On completion of the grouping command, the records with matching values in
            the grouping column are combined together to form a group.</para>
            <para></para>
            <para>Every such group is captioned by a group bar. Each group bar is prefixed
            with a Plus/Minus button. using this button, the underlying records of the group
            can be viewed or hidden.</para>
            </remarks>
            <value>
            true if the Grouping feature is enabled; otherwise, false. The default is false.
            </value>
            <example>
            The following example sample demonstrates how to use <b>AllowGrouping</b>
            property to enable the grouping feature in the <b>Grid</b>
            control. 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.AllowGrouping = true;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AllowSearching">
            <summary>
            Gets or sets a value indicating whether column searching allowed.
            </summary>
            <remarks>
            Searching of column cells can be enabled using the <b>AllowSearching</b> property. 
            </remarks>
            <value>
            true if the AllowSearching feature is enabled; otherwise, false. The default is
            true.
            </value>
            <example>
            The following code example demonstrates how to use the AllowSearching property to
            declaratively enable the AllowSearching up column cells feature in the <b>Grid</b> control. 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.AllowSearching = true;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.GroupDescriptors">
            <summary>
            Gets or sets GroupDescriptors List
            </summary>
            <remarks>
            <para>Contains mapping name of the all grouped columns.</para>
            <para></para>
            <para>Performing Grouping at the initial load can be performed by this
            property.</para>
            <para></para>
            <para>Grouping at run time is performed through UI only</para>
            </remarks>
            <value>
            Collection of strings represents Grouped columns
            </value>
            <example>
            The following example demonstrates how to use <b>GroupDescriptors</b> property to
            form the group using CustomerName column. 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel(); 
            gridModel.GroupDescriptors.Add(&quot;CustomerName&quot;);</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.ActionMode">
            <summary>
            Gets or sets Action Mode of the <b>Grid </b>control
            </summary>
            <remarks>
            <b>ActionMode</b> property specifies the operation mode of the <b>Grid</b>
            Control
            </remarks>
            <value>
            String represents whether Server mode or JSON mode. Default mode is Server.
            </value>
            <example>
            The following example demonstrates how to use <b>ActionMode</b> property to JSON
            Mode.
            <para></para>
            <para></para>GridPropertiesModel gridModel = new GridPropertiesModel();
            <para></para>gridModel.ActionMode = &quot;JSON&quot;;
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.KeyConfigurator">
            <summary>
            KeyCOnfigurator is the property which is used to set different shortcuts for all operations
            Using Keys Enumerable you can set the shortcut to operations such as FocusKey, FirstCellSelection, FirstRowSelection etc
            if one or more grid is there set different shortcuts to focuskey for both the grids.
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Many actions with Keys datatype
            </value>
            <example>
            The following example demonstrates how to use <b>KeyConfigurator</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.FocusKey = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.FrozenRows">
            <summary>
            Gets or sets the FrozenRows property which freezes the number of Rows from Top.
            </summary>
            <value>
            Positive numeric value
            </value>
            <example>
            The following example demonstrates how to use <b>FrozenColumns</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.FrozenRows = 2;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.FrozenColumns">
            <summary>
            Gets or sets the FrozenColumns property which freezes the number of columns from left side.
            </summary>
            <value>
            Positive numeric value
            </value>
            <example>
            The following example demonstrates how to use <b>FrozenColumns</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.FrozenColumns = 2;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.HeaderText">
            <summary>
            Gets or sets Display name of the <b>Grid </b>control columns
            </summary>
            <remarks>
            Display name of the column Header
            </remarks>
            <value>
            Collection String represnts Text displayed on the column header
            </value>
            <example>
            The following example demonstrates how use HeaderText property to display Custom
             values in the Column Header.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.HeaderText.Add(&quot;Order Id&quot;);
            gridModel.HeaderText.Add(&quot;Customer Id&quot;);
            gridModel.HeaderText.Add(&quot;Customer Type&quot;);
            gridModel.HeaderText.Add(&quot;Order Date&quot;);</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.QueryParam">
            <summary>
            Gets or sets a value QueryParam for Grid Action .
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.DataSource">
            <summary>
            Gets or sets DataSource for the <b>Grid</b> control
            </summary>
            <remarks>
            <b>Grid </b>control supports any kind of IEnumerable <b>DataSource. </b>
            </remarks>
            <value>
            <b>DataSource</b> object that contains a collection of objects that represent
            the rows of the <b>Grid</b> control.
            </value>
            <example>
            The following code example demonstrates how to use the DataSource property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.DataSource = &quot;new EmployeeDataSource().Employee&quot;;</code>
            </example>        
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.WebService">
            <summary>
            Gets or sets the url for webservice data binding
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.Caption">
            <summary>
            Gets or sets the text to render in the caption row of the <b>Grid </b>control.
            </summary>
            <remarks>
            Use the Caption property to specify the text to render in an HTML caption
            element in a <b>Grid</b> control
            </remarks>
            <value>
            A string that represents the text to render in an HTML caption row in a <b>Grid
            </b>control. The default value is data source name and total number of records.
            </value>
            <example>
            The following example demonstrates how to use <b>Caption</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.Caption = &quot;Orders Table&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.CaptionText">
            <summary>
            Gets or sets control the caption text displayed.
            <remarks>
            Use the CaptionText property to specify the captionFormats to render in an HTML caption       
            </remarks>
            <value>
            Default Value is "{Caption} : {TotalRecordsCount} Items"
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.EmptyText">
            <summary>
            Get or set the Empty text when the datasource is null 
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.GroupCaptionText">
            <summary>
            Get or set the GroupCaption text
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AllowSorting">
            <summary>
            Gets or sets a value indicating whether the <b>AllowSorting</b> is enabled
            </summary>
            <remarks>
            <para>Grid data can be sorted in ascending or descending order of values.</para>
            <para></para>
            <para>To enable sorting, set the AllowSorting property to true. </para>
            <para></para>
            <para>Select a column header to initiate a sort operation.</para>
            <para></para>
            <para>The first sort operation sorts the selected column values in ascending
            order.</para>
            <para></para>
            <para>The second sort operation sorts the selected column values in descending
            order.</para>
            <para></para>
            <para>All subsequent sort operations will toggle the sort direction between
            ascending and descending.  </para>
            </remarks>
            <value>
            true if the sorting feature is enabled; otherwise, false. The default is false.
            </value>
            <example>
            The following code example demonstrates how to use the <b>AllowSorting</b>
            property to enable the sorting feature in the <b>Grid</b> control.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.AllowSorting = true;</code>
            </example>
            <seealso cref="!:Syncfusion.Mvc.Grid.Model.AllowMultiSorting">AllowMultiSorting</seealso>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AllowMultiSorting">
            <summary>
            Gets or sets a value indicating whether <b>MultiColumnSorting</b> is enabled.
            </summary>
            <remarks>
            To enable Sorting of more than one columns set<b> AllowMultisorting </b>property
            to true. 
            <para></para>
            <para>Grid data can be sorted in ascending or descending order of values.</para>
            <para></para>
            <para>Select a column header to initiate a sort operation.</para>
            <para></para>
            <para>The first sort operation sorts the selected column values in ascending
            order.</para>
            <para></para>
            <para>The second sort operation sorts the selected column values in descending
            order.</para>
            <para></para>
            <para>All subsequent sort operations will toggle the sort direction between
            ascending and descending.  </para>
            <para></para>
            <para>Multi column sorting can be performed by pressing the <b>CTRL</b> key and
            selecting the required column for sorting.</para>
            </remarks>
            <value>
            true if the sorting feature is enabled; otherwise, false. The default is false.
            </value>
            <example>
            The following code example demonstrates how to use the <b>AllowMultiSorting</b>
            property to enable the Muliple columns sorting feature in the
            <b>Grid</b> control. 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.AllowMultiSorting = true;</code>
            </example>
            <seealso cref="!:Syncfusion.Mvc.Grid.Model.AllowSorting">AllowSorting</seealso>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.CustomCss">
            <summary>
            Gets or sets <b>CustomCss</b> which is applied for the Grid
            </summary>
            <remarks>
            Css Class Applied for the <b>Grid</b> control.
            </remarks>
            <value>
            A string that represents the Name of the Css class applied for the <b>Grid</b>
            control.
            </value>
            <example>
            The following code example demonstrates how to use the <b>CustomCss</b> property  
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.CustomCss = &quot;Syncfusion-Grid-Office2007Black&quot;;</code>
            </example> 
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AutoFormat">
            <summary>
            Gets of sets autoFormat applied to the Grid
            </summary>
            <remarks>
            Any built-in autoformats can applied to Grid. when CustomCss is specified
            <b>AutoFormat</b>is set to None.
            </remarks>
            <value>
            Enum represents the name of the AutoFormat to be applied
            </value>
            <example>
            GridPropertiesModel gridModel =new GridPropertiesModel();
            <para>gridModel.AutoFormat =Model.AutoFormatType.Vista;</para>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.HttpRequestType">
            <summary>
            Defines the type of Http request made by the Grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.SortDescriptors">
            <summary>
            Gets or sets SortDescriptors With Direction
            </summary>
            <remarks>
            contains all sorted column and corresponding directions
            </remarks>
            <value>
            Dictionary Represents collection of sorted columns and its direction
            </value>
            <example>
            The following example demonstrates how to use <b>SortedColumns</b> property 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.SortedColumns.Add(&quot;CustomerName&quot;,
            System.ComponentModel.ListSortDirection.Descending);</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.ShowCaption">
            <summary>
            Gets or sets a value indicating whether caption row is <b>displayed</b> in the
            Grid control.
            </summary>
            <remarks>
            Use the ShowCaption property to specify whether a <b>Grid</b> control displays
            the Caption row.
            </remarks>
            <value>
            true to display the header row; otherwise, false. The default is true.
            </value>
            <example>
            The following code example demonstrates how to use the <b>ShowCaption</b>
            property to display the header row in a <b>Grid</b> control. 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.ShowCaption = true;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.ShowStackedHeader">
            <summary>
            Gets or sets a value indicating whether [show stacked header].
            </summary>
            <value>
              <c>true</c> if [show stacked header]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.PageSize">
            <summary>
            Gets or sets the number of records to display on a page in a <b>Grid</b> control
            </summary>
            <remarks>
            When the paging feature is enabled (by setting the AllowPaging property to
            true), use the PageSize property to specify the number of records to display on
            a single page.
            </remarks>
            <value>
            The number of rows to display on a single page. The default is 12.
            </value>
            <example>
            The following code example demonstrates how to use the PageSize property to
            display 20  records at a time in a <b>Grid</b> control 
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.AllowPaging = true;
            gridModel.PageCount = 8;
            gridModel.PageSize = 20;</code>
            </example>
            <seealso cref="!:Syncfusion.Mvc.Grid.Model.PageCount">PageSize.</seealso>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.PageCount">
            <summary>
            Gets or sets  number of pages displayed in pager bar
            </summary>
            <remarks>
            When the paging feature is enabled (by setting the AllowPaging property to
            true), use the PageCount property to determine the number of pages displayed on
            the pager
            </remarks>
            <value>
            No of pages displayed on the pager. Default is 10.
            </value>
            <example>
            The following code example demonstrates how to use the PageCount property in
            the <b>Grid</b> control.
             <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.AllowPaging = true;
            gridModel.PageCount = 12;
            gridModel.PageSize = 10;</code>
            </example>
            <seealso cref="!:Syncfusion.Mvc.Grid.Model.PageSize">PageSize</seealso>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AllowPaging">
            <summary>
            Gets or sets a value indicating whether the paging feature is enabled.
            </summary>
            <remarks>
            Instead of displaying all the records in the data source at the same time, the
            <b>Grid</b> control can automatically break the records up into pages. The
            paging feature can be used with any data source object. 
            <para></para>
            <para>To enable the paging feature, set the AllowPaging property to true. By
            default, the <b>Grid</b> control displays 10 records on a page at a time. You
            can change the number of records displayed on a page by setting the PageSize
            property. To determine the total number of pages required to display the data
            source contents, use the PageCount property. </para>
            <para></para>
            <para>When paging is enabled, an additional row called the pager is
            automatically displayed at the bottom of the the <b>Grid</b> control. The pager
            row contains various options that allow the user to navigate to the other
            pages.</para>
            </remarks>
            <value>
            true if the paging feature is enabled; otherwise, false. The default is false.
            </value>
            <example>
            The following code example demonstrates how to use the AllowPaging property to
            enable the paging feature in the <b>Grid</b> control.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.AllowPaging = true;
            gridModel.PageCount = 8;
            gridModel.PageSize = 12;</code>
            </example>
            <seealso cref="!:Syncfusion.Mvc.Grid.Model.PageSize">PageSize</seealso>
            <seealso cref="!:Syncfusion.Mvc.Grid.Model.PageCount">PageCount</seealso>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.CurrentPage">
            <summary>
            Sets the CurrentPage
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AllowSummaries">
             <summary>
             Gets or sets a value indicating Summaries are allowed or not
             </summary>
            <value> 
             true if the <b>AllowSummaries </b>feature is enabled; otherwise, false. The
             default is false.
            </value>
            <remarks>Used to enable summaries </remarks>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.AllowAlternateRowStyle">
            <summary>
            Gets or sets a value indicating whether [allow alternate row styles].
            </summary>
            <value>
            	<c>true</c> if [allow alternate row styles]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.TotalRecordsCount">
            <summary>
            Gets or sets TotalRecordsCount
            </summary>
            <remarks>
            Gets<b> TotalRecordsCount </b>in the current data source binded in the
            <b>Grid</b> control
            </remarks>
            <value>
            Integer value represents total number of records in the current DataSource
            </value>
            <example>
            The following example shows how to use the <b>TotalRecordsCount </b>property
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            int count = gridModel.TotalRecordsCount;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.MergeCellInfo">
            <summary>
            Gets or sets the merge cell info.
            </summary>
            <value>
            The merge cell info.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.ClientSideEvents">
            <summary>
            contains list of client side events
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.HasConditionalFormats">
            <summary>
            Indicates the grid has ConditionalFormats
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.GridStackedRows">
            <summary>
            Gets or sets the grid stacked rows.
            </summary>
            <value>
            The grid stacked rows.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.NestedColumnsCollection">
            <summary>
            Gets or sets the nested columns collection.
            </summary>
            <value>
            The nested columns collection.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.GridStackedColumns">
            <summary>
            Gets or sets the grid stacked columns.
            </summary>
            <value>
            The grid stacked columns.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.ConditionalFormats">
            <summary>
            A collection from <see ref="GridConditionalFormatDescriptor"/> that defines 
            conditional formats for grid
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.EnableContextMenu">
            <summary>
            Gets or sets a value indicating whether ContextMenu is enabled.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>More user interaction can be done using context menu after enabling this 
            property.</description></item></list>
            </remarks>
            <value>
            true if the <b>EnableContextMenu </b>feature is enabled; otherwise,
            false. The default is false.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.EnableOnDemand">
            <summary>
            Gets or sets a value indicating whether OnDemand is enabled.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>Supports LINQ in the name of OnDemand                  
                                           </description></item>
            <item>
            <description>Paging, sorting can be performed in this
            mode.</description></item>
            <item>
            <description>This property works only when the OnDemand 
            Enable mode.</description></item>
            <item>
            <description>Required data source should set in PagingSortingAction after enabling this 
            property.</description></item></list>
            </remarks>
            <value>
            true if the <b>EnableOnDemand </b>feature is enabled; otherwise,
            false. The default is false.
            </value>
            <example>
            The following example demonstrates how to use <b>OnDemandMode</b>
            property.
            <para></para>
            <para></para>GridPropertiesModel gridModel = new GridPropertiesModel();                  
            <para></para>gridModel.EnableOnDemand = true;   
            <para></para>gridModel.DataSource = new
            StudentDataContext().PassThroughStudent.AsQueryable();
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.DatePickerModel">
            <summary>
            Gets or sets a reference to the datepicker model that contains datepicker properties.
            </summary>
            <value>The Syncfusion.Mvc.Tools.DatePickerModel instance that contains datepicker control properties.</value>
            <remarks> datepicker model is used to select date time propery in edit mode</remarks>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.GridExport">
            <summary>
            Used to get or set the Grid Excel export properties such as action mappers
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.Localize" -->
        <member name="P:Syncfusion.Mvc.Grid.GridPropertiesModel`1.LocalizationPath">
            <summary>
            Gets or sets the resource location.
            </summary>
            <value>The resource location.</value>
            <example>
            The following example shows how to use the <b>Localize </b>property
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
             gridModel.LocalizationPath="~/App_LocalResources";</code>
            </example>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.ActionMode">
            <summary>
            This actionmode enumerable is used to set the ActionMode of the Grid
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.ActionMode.Server">
            <summary>
            Specifies the ActionMode is server
            </summary>        
        </member>
        <member name="F:Syncfusion.Mvc.Grid.ActionMode.JSON">
            <summary>
            Specifies the ActionMode is JSON
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.RequestType">
            <summary>
            Specifies the  Request Type
            </summary>
            <remarks>
            Specifies th request Type
            </remarks>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RequestType.Paging">
            <summary>
            Paging Request
            </summary>            
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RequestType.Sorting">
            <summary>
            Sorting Request
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RequestType.Grouping">
            <summary>
            Grouping Request
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RequestType.Filtering">
            <summary>
            Filter Request
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RequestType.Exporting">
            <summary>
            Excel Exporting request
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RequestType.BeginEdit">
            <summary>
            Begin Editing Request
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RequestType.BeginAddNew">
            <summary>
            Add New record Request
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RequestType.Delete">
            <summary>
            Grid Record Deleting Request
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RequestType.Save">
            <summary>
            Grid Record Save Request
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RequestType.Cancel">
            <summary>
            Grid Action Cancel Request
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RequestType.FilterChoiceRequest">
            <summary>
            Dropdown Filter Choice Request
            </summary>        
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RequestType.RowDropping">
            <summary>
            RowDropping Acton Request
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RequestType.Refresh">
            <summary>
            Refresh Acton Request
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RequestType.Searching">
            <summary>
            Searching Acton Request
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.DragandDropMode.Normal">
            <summary>
            Normal div which contains minimal information comes along with cursor while dragging
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.DragandDropMode.GhostRows">
            <summary>
            Clone of that selected rows  comes along with cursor while dragging
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridEditMode.Normal">
            <summary>
            Grid Edit mode- inline Row edit
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridEditMode.InlineForm">
            <summary>
            Inline form edit 
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridEditMode.InlineTemplateForm">
            <summary>
            User specified template, which will be used to edit the row in inline form edit mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridEditMode.Dialog">
            <summary>
            Dialog edit 
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridEditMode.DialogTemplate">
            <summary>
            User specified template, which will be used to edit the row in dialog edit mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridEditMode.AutoExcel">
            <summary>
            Excel like editing, records will saved automatically after specified time interval.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridEditMode.ManualExcel">
            <summary>
            Excel like editing, records will saved manually after clicking the save button in the toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridEditMode.ExternalForm">
            <summary>
            Editing can be done through External Form.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridEditMode.ExternalFormTemplate">
            <summary>
            User specified template, which will be used to edit the row in external form edit mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.CommandTypes">
            <summary>
            Specifies the GridCommand Types
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CommandTypes.AddNew">
            <summary>
            AddNew Command type used for adding new record via UnboundColumn
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CommandTypes.Edit">
            <summary>
            Edit Command type used for editing record via UnboundColumn
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CommandTypes.Delete">
            <summary>
            Edit Command type used for deleting record via UnboundColumn
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CommandTypes.Update">
            <summary>
            Update Command type used for Updating record via UnboundColumn
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CommandTypes.Cancel">
            <summary>
            Edit Command type used for cancel editing via UnboundColumn
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.CommandTypes.Custom">
            <summary>
            Custom Command type used for to perfomed custom action
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.UnboundItemOptions">
            <summary>
            Specifies the Unbound item Options
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.UnboundItemOptions.TextOnly">
            <summary>
            TextOnly option used to display an unbound item as text only type.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.UnboundItemOptions.ImageOnly">
            <summary>
             ImageOnly option used to display an unbound item as Image only type.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.UnboundItemOptions.ImagePlusText">
            <summary>
             ImagePlusText option used to display an unbound item as both image and text type.
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.UnBoundItemTypes">
            <summary>
            Specifies the Unbound item Types
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.UnBoundItemTypes.HyperLink">
            <summary>
            Unbound item can be displayed as HyperLink
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.UnBoundItemTypes.Button">
            <summary>
            Unbound item can be displayed as Button
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridToolBarItems.AddNew">
            <summary>
            Add new tool bar item
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridToolBarItems.Edit">
            <summary>
            Edit record tool bar item
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridToolBarItems.Update">
            <summary>
            Update record tool bar item
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridToolBarItems.Delete">
            <summary>
            Delete record tool bar item
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridToolBarItems.ExcelExport">
            <summary>
            Excel export tool bar item
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridToolBarItems.Cancel">
            <summary>
            Cancel toolbar item
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridToolBarItems.Custom">
            /// <summary>
            Cancel edit request toolbar item
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridToolBarItems.WordExport">
            <summary>
            Word export tool bar item
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridToolBarItems.PDFExport">
            <summary>
            Excel export tool bar item
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridToolBarItems.Search">
            <summary>
            Searching tool bar item
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.PredicateType">
            <summary>
            Predicate type defined for Filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PredicateType.And">
            <summary>
            Does an AND operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PredicateType.Or">
            <summary>
            Does an OR operation on filters.
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.NodeType">
            <summary>
            NodeType defined for Grid Rows
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.NodeType.GroupCaptionRow">
            <summary>
            Group Caption row
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.NodeType.RecordRow">
            <summary>
            Grid Record row
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.NodeType.AlternateRecordRow">
            <summary>
            Grid Alternate record row
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.NodeType.SummaryRow">
            <summary>
            Grid Summary row,
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridTableCellType">
            <summary>
            Defines cell types
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridTableCellType.GroupCaptionCell">
            <summary>
            Group caption cell.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridTableCellType.GroupHeaderIndentCell">
            <summary>
            Indent cell in group header section.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridTableCellType.SummaryFieldCell">
            <summary>
            Field cell in summary row.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridTableCellType.IndentCell">
            <summary>
            Indent cell in group.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridTableCellType.TopLeftHeaderCell">
            <summary>
            The top-left header cell.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridTableCellType.RowHeaderCell">
            <summary>
            Any row header cell.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridTableCellType.ColumnHeaderCell">
            <summary>
            Column header cell.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridTableCellType.RecordPlusMinusCell">
            <summary>
            PlusMinus cell in a record row.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridTableCellType.RecordFieldCell">
            <summary>
            Field cell in a non-alternate record row.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridTableCellType.AlternateRecordFieldCell">
            <summary>
            Field cell in an alternate record row.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridTableCellType.AlternateRecordRowHeaderCell">
            <summary>
            Any header cell in an alternate record row.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridTableCellType.EmptyCell">
            <summary>
            Empty cell 
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridTableCellType.CaptionCell">
            <summary>
            Caption Cell
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridTableCellType.MasterCell">
            <summary>
            Master Cell
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridTableCellType.MasterHeaderCell">
            <summary>
            Master Header Cell
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridDataConditionType">
            <summary>
            Specifies the type of condition to be used in Conditional Formatting.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridDataConditionType.Equals">
            <summary>
            Performs an Equals opertion on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridDataConditionType.NotEquals">
            <summary>
            Performs a NotEquals operation on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridDataConditionType.LessThan">
            <summary>
            Performs a LessThan operation on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridDataConditionType.LessThanOrEqual">
            <summary>
            Performs a LessThanOrEqual operation on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridDataConditionType.GreaterThan">
            <summary>
            Performs a GreatherThan operation on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridDataConditionType.GreaterThanOrEqual">
            <summary>
            Performs a GreaterThanOrEqual operation on the operands.
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.FilterDropDownType">
            <summary>
            Specifies the type of FilterMenu filter option
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.FilterDropDownType.SimpleList">
            <summary>
             Simple dropdown list 
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.FilterDropDownType.CheckBoxList">
            <summary>
            Check box dropdown list
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.Keys">
            <summary>
            Enumerable contains supported shortcutkeys
            Integer format of this enumerable shows the specified action
            When One key is converted into integer, from that we can identify the keycode of javascript, shiftkey, altkey, ctrlkey,
            if one browser uses different keycode it will store in AltKeyCode
            for example: int keynumber = (int)Keys.Home; now keynumber is 36000, from that 36 denotes keycode of home key
            first 0 denotes ctrlkey is off, second 0 denotes altkey is off, third 0 denotes shift key is off.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.Home">
            <summary>
            36000 denotes home key, default for firstcellselection
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.End">
            <summary>
            35000 denotes End key, default for lastcellselection
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusHome">
            <summary>
            36000 denotes home key,, default for firstrowselection
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusEnd">
            <summary>
            35100 denotes End key, default for lastrowselection
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.PgUp">
            <summary>
            denotes PageUp Key, default for previouspage
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.PgDn">
            <summary>
            denotes PageDown Key, default for nextpage
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.Insert">
            <summary>
            denotes Insert key, default for InsertRecord
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.Delete">
            <summary>
            denotes Delete key, default for Delete Record
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.Enter">
            <summary>
            denotes enter key, default for Saverequest
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.Esc">
            <summary>
            denotes Escape key, default for cancelrequest
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.F2">
            <summary>
            denotes F2 key, default for editing
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusF">
            <summary>
            denotes CtrlPlusAltPlusF key combination,default for Focuskey
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusHome">
            <summary>
            denotes AltPlusHome key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusEnd">
            <summary>
            denotes AltPlusEnd key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusPgUp">
            <summary>
            denotes AltPlusPgUp key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusPgDn">
            <summary>
            denotes AltPlusPgDn key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusInsert">
            <summary>
            denotes AltPlusInsert key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusDelete">
            <summary>
            denotes AltPlusDelete key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusEnter">
            <summary>
            denotes AltPlusEnter key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusEsc">
            <summary>
            denotes AltPlusEsc key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusHome">
            <summary>
            denotes CtrlPlusAltPlusHome key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusEnd">
            <summary>
            denotes CtrlPlusAltPlusEnd key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusPgUp">
            <summary>
            denotes CtrlPlusAltPlusPgUp key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusPgDn">
            <summary>
            denotes CtrlPlusAltPlusPgDn key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusInsert">
            <summary>
            denotes CtrlPlusAltPlusInsert key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusDelete">
            <summary>
            denotes CtrlPlusAltPlusDelete key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusEnter">
            <summary>
            denotes CtrlPlusAltPlusEnter key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusEsc">
            <summary>
            denotes CtrlPlusAltPlusEsc key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusA">
            <summary>
            denotes AltPlusA key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusA">
            <summary>
            denotes CtrlPlusAltPlusA key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusB">
            <summary>
            denotes AltPlusB key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusB">
            <summary>
            denotes CtrlPlusAltPlusB key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusC">
            <summary>
            denotes AltPlusC key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusC">
            <summary>
            denotes CtrlPlusAltPlusC key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusD">
            <summary>
            denotes AltPlusD key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusD">
            <summary>
            denotes CtrlPlusAltPlusD key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusE">
            <summary>
            denotes CtrlPlusAltPlusE key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusE">
            <summary>
            denotes AltPlusE key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusF">
            <summary>
            denotes AltPlusF key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusG">
            <summary>
            denotes CtrlPlusAltPlusG key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusG">
            <summary>
            denotes AltPlusG key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusH">
            <summary>
            denotes CtrlPlusAltPlusH key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusH">
            <summary>
            denotes AltPlusH key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusI">
            <summary>
            denotes CtrlPlusAltPlusI key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusI">
            <summary>
            denotes AltPlusI key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusJ">
            <summary>
            denotes CtrlPlusAltPlusJ key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusJ">
            <summary>
            denotes AltPlusJ key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusK">
            <summary>
            denotes CtrlPlusAltPlusK key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusK">
            <summary>
            denotes AltPlusK key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusL">
            <summary>
            denotes AltPlusL key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusL">
            <summary>
            denotes CtrlPlusAltPlusL key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusM">
            <summary>
            denotes AltPlusM key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusM">
            <summary>
            denotes CtrlPlusAltPlusM key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusN">
            <summary>
            denotes AltPlusN key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusN">
            <summary>
            denotes CtrlPlusAltPlusN key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusO">
            <summary>
            denotes AltPlusO key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusO">
            <summary>
            denotes CtrlPlusAltPlusO key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusP">
            <summary>
            denotes AltPlusP key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusP">
            <summary>
            denotes CtrlPlusAltPlusP key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusQ">
            <summary>
            denotes AltPlusQ key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusQ">
            <summary>
            denotes CtrlPlusAltPlusQ key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusR">
            <summary>
            denotes AltPlusR key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusR">
            <summary>
            denotes CtrlPlusAltPlusR key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusS">
            <summary>
            denotes AltPlusS key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusS">
            <summary>
            denotes CtrlPlusAltPlusS key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusT">
            <summary>
            denotes AltPlusT key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusT">
            <summary>
            denotes CtrlPlusAltPlusT key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusU">
            <summary>
            denotes AltPlusU key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusU">
            <summary>
            denotes CtrlPlusAltPlusU key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusV">
            <summary>
            denotes AltPlusV key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusV">
            <summary>
            denotes CtrlPlusAltPlusV key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusW">
            <summary>
            denotes AltPlusW key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusW">
            <summary>
            denotes CtrlPlusAltPlusW key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusX">
            <summary>
            denotes AltPlusX key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusX">
            <summary>
            denotes CtrlPlusAltPlusX key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusY">
            <summary>
            denotes AltPlusY key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusY">
            <summary>
            denotes CtrlPlusAltPlusY key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusZ">
            <summary>
            denotes AltPlusHome key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusZ">
            <summary>
            denotes CtrlPlusAltPlusZ key combination
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusUpArrow">
            <summary>
            denotes AltPlusUpArrow key combination,default for selected groupcollapse
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusUpArrow">
            <summary>
            denotes CtrlPlusAltPlusUpArrow key combination,default for TotalGroupcollapse
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.AltPlusDownArrow">
            <summary>
            denotes AltPlusDownArrow key combination, default for selected groupexpand
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Keys.CtrlPlusAltPlusDownArrow">
            <summary>
            denotes CtrlPlusAltPlusDownArrow key combination,default for TotalGroupExpand
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PagerStyle.Default">
            <summary>
            Numeric Pager with Prev/Next page navigation buttons
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PagerStyle.Slider">
            <summary>
            Page Navigation through slider
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PagerStyle.Manual">
            <summary>
            Manual paging navigation by specifying the page number
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PagerStyle.Numeric">
            <summary>
            Numeric Pager
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PagerStyle.Advanced">
            <summary>
            Specifies the customization of page size dynamically and it combines with manual pager
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PagerStyle.SliderAndManual">
            <summary>
            Page Navigation through slider and manually entering the page number
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PagerStyle.SliderAndAdvanced">
            <summary>
            Page Navigation through slider and also specifies the customization of page size dynamically
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PagerStyle.PrevAndNext">
            <summary>
            Page Navigation through prev/next butttons
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PagerStyle.DefaultAndManual">
            <summary>
            Page Navigation through prev/next butttons
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PagerStyle.DefaultAndAdvanced">
            <summary>
            Page Navigation through defaul and advanced pager
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PagerStyle.PrevNextAndManual">
            <summary>
            Page Navigation through prev/next and manual pager
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PagerStyle.PrevNextAndAdvanced">
            <summary>
            Page Navigation through prev/next and advanced pager
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.ExternalFormPosition.TopRight">
            <summary>
            ExternalEdit Form will be aligned in the top right position of grid
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.ExternalFormPosition.BottomLeft">
            <summary>
            ExternalEdit Form will be aligned in the bottom left position of grid
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.ExternalFormPosition.Custom">
            <summary>
            ExternalEdit Form will be placed at given target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Position.TopLeft">
            <summary>
            Pager will be aligned in the top left position of grid
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Position.TopRight">
            <summary>
            Pager will be aligned in the top right position of grid
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Position.BottomLeft">
            <summary>
            Pager will be aligned in the bottom left position of grid
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.Position.BottomRight">
            <summary>
            Pager will be aligned in the bottom right position of grid
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.FilterMode.Default">
            <summary>
            Filtering can be done by using the filter icon in the column header
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.FilterMode.FilterBar">
            <summary>
            Filtering can be done using the filter bar which is displayed below the column header
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.FilterBarMode.Immediate">
            <summary>
            Filtering will be started immediately once the filter value is given
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.FilterBarMode.OnEnter">
            <summary>
            Filtering will be started once the enter key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.VirtualScrollMode.Normal">
            <summary>
            Virtual Scrolling will be applied in Normal Mode
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.VirtualScrollMode.Facebook">
            <summary>
            Virtual Scrolling will be applied in Facebook Style Mode
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RowPosition.Top">
            <summary>
            Add new row at top of the grid
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.RowPosition.Bottom">
            <summary>
            Add new row at bottom of the grid
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.LayoutScrollbarSide">
            <summary>
            LayoutScrollbarSide enum specifies the side of vertical scrollbar in mozilla. It will affect only in RTL Mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.LayoutScrollbarSide.Right">
            <summary>
            Specifies the scrollbars in right side - Default
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.LayoutScrollbarSide.Left">
            <summary>
            Specifies the scrollbars in left side
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.IMultiColumnDropDownBuilder`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IMultiColumnDropDownBuilder`1.CustomCss(System.String)">
            <summary>
            Gets or sets <b>CustomCss</b> which is applied for the Grid
            </summary>
            <remarks>
            Css Class Applied for the <b>Grid</b> control.
            </remarks>
            <value>
            A string that represents the Name of the Css class applied for the <b>Grid</b>
            control.
            </value>
            <example>
            The following code example demonstrates how to use the <b>CustomCss</b> property  
            <para></para>
            <code lang="aspx">        
            &lt;%=Html.MultiColumnDropDown<typeparamref name=""/>("MulticolumnControl1")
            .CustomCss("MyOffice")
            %></code>
            </example> 
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IMultiColumnDropDownBuilder`1.ActionMode(Syncfusion.Mvc.Grid.ActionMode)">
            <summary>
            Gets or sets Action Mode of the <b>MultiDropDown </b>control
            </summary>
            <remarks>
            <b>ActionMode</b> property specifies the operation mode of the <b>Grid</b>
            Control
            </remarks>
            <value>
            String represents whether Server mode or JSON mode. Default mode is Server.
            </value>
            <example>
            The following example demonstrates how to use <b>ActionMode</b> property to JSON
            Mode.
            <code lang="aspx">        
            &lt;%=Html.MultiColumnDropDown<typeparamref name=""/>("MulticolumnControl1")
            .ActionMode("JSON")
            %></code>
            </example> 
        </member>
        <member name="T:Syncfusion.Mvc.Grid.MultiColumnDropDownBuilder`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.MultiColumnDropDownBuilder`1.AllowScrolling(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.MultiColumnDropDownBuilder`1.MozillaLayoutScrollbarSide(Syncfusion.Mvc.Grid.LayoutScrollbarSide)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.MultiColumnDropDownBuilder`1.AllowSorting(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.MultiColumnDropDownBuilder`1.Columns(System.Action{Syncfusion.Mvc.Grid.MultiColumnDropdownColumnBuilder{`0}})" -->
        <member name="T:Syncfusion.Mvc.Grid.MultiColumnDropdownColumn`1">
            <summary>
            MultiColumnDropdownColumn which is of generic type class contain column properties.
            It contains Width, HeaderText, VIsible, IsUnbound, Format, MappingName properties
            </summary>
            <remarks>
            By that column mapping can be done in multicolumn dropdown    
            </remarks>
            <seealso cref="!:MultiColumnDropdownColumnBuilder"/>
            <typeparam name="T">T may be any class</typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.MultiColumnDropdownColumn`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridColumn`1"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropdownColumn`1.ColumnDelegate">
            <summary>
            Delegate that will be invoked on each item in the in the datasource in order to obtain the current item's value.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropdownColumn`1.ColumnType">
             <summary>
             Gets or sets the ColumnsType property of each column which specifies the type of the column in multicolumndropdown
             </summary> 
             <remarks>
             By default it take the column type
             </remarks>
             <example>
            GridColumn<typeparam name="T"></typeparam> column = new GridColumn<typeparam name="T"></typeparam>();
            column.ColumnType = Type.Int32;
             </example>        
             <param name="ColumnType"></param>
             <returns></returns>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropdownColumn`1.MappingName">
             <summary>
            Gets or sets name of the column
             </summary>
             <remarks>
             By default mapping name is set as empty
             </remarks>
             <example>
            GridColumn<typeparam name="T"></typeparam> column = new GridColumn<typeparam name="T"></typeparam>();
            column.MappingName = "Title";
             </example>        
             <param name="MappingName"></param>
             <returns></returns>        
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropdownColumn`1.Format">
             <summary>
            Gets or sets Custom format for the column.
             </summary>   
             <remarks>
             By default format property is null, it affects if it is unbound column that if column is not a mapper.
             </remarks>
             <example>
            GridColumn<typeparam name="T"></typeparam> column = new GridColumn<typeparam name="T"></typeparam>();
            column.MappingName = "Title";
            column.IsUnbound = true;
            column.Format = { Price} $;
             </example>             
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropdownColumn`1.HeaderText">
             <summary>
             Gets or sets HeadetText displayed on the column header.
             </summary>
             <remarks>
             By default HeaderText property is empty.
             </remarks>
             <example>
            GridColumn<typeparam name="T"></typeparam> column = new GridColumn<typeparam name="T"></typeparam>();
            column.HeaderText = "Title";
             </example>                
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropdownColumn`1.Width">
            <summary>
            Gets or sets Width for the column.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropdownColumn`1.IsUnbound">
             <summary>
             Gets or sets whether the column is unbound or not.
             </summary>
             <remarks>
             By default IsUnbound property is false.
             </remarks>
             <example>
            GridColumn<typeparam name="T"></typeparam> column = new GridColumn<typeparam name="T"></typeparam>();
            column.MappingName = "Title";
            column.IsUnbound = true;
            column.Format = { Price} $;
             </example>        
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropdownColumn`1.AllowSorting">
             <summary>
             Gets or sets whether the column can sort or not.
             </summary>
             <remarks>
             By default AllowSorting property is false.
             </remarks>
             <example>
            GridColumn<typeparam name="T"></typeparam> column = new GridColumn<typeparam name="T"></typeparam>();
            column.AllowSorting = true;
             </example> 
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropdownColumn`1.Visible">
             <summary>
             Gets or sets visibility for the column.
             </summary>
             <remarks>
             By default Visibile property is true.
             </remarks>
             <example>
            GridColumn<typeparam name="T"></typeparam> column = new GridColumn<typeparam name="T"></typeparam>();
            column.Visible = false;
             </example>        
        </member>
        <member name="T:Syncfusion.Mvc.Grid.MultiColumnDropdownColumnBuilder`1">
            <summary>
            MultiColumnDropdownColumnBuilder implements IRootMultiColumnDropDownColumnBuilder interface, IMultiColumnDropDownColumnBuilder interface ehich contains properties for the grid column 
            in multicolumn dropdown. 
            </summary>
            <remarks>
            It is used in view side column adding functionality.
            </remarks>
            <seealso cref="!:MultiColumnDropdownColumn"/>    
            <typeparam name="T">Generic type</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.MultiColumnDropdownColumnBuilder`1.Format(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.MultiColumnDropdownColumnBuilder`1.HeaderText(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.MultiColumnDropdownColumnBuilder`1.Width(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.MultiColumnDropdownColumnBuilder`1.IsUnbound(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.MultiColumnDropdownColumnBuilder`1.AllowSorting(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.MultiColumnDropdownColumnBuilder`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.MultiColumnDropdownColumnBuilder`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.MultiColumnDropdownColumnBuilder`1.Add(System.String)" -->
        <member name="M:Syncfusion.Mvc.Grid.MultiColumnDropdownColumnBuilder`1.ExpressionToName``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Grabs the property name from a member expression.
            </summary>
            <param name="expression">The expression</param>
            <returns>The name of the property</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.MultiColumnDropdownColumnBuilder`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            to get the enumerator of the column
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.MultiColumnDropdownColumnBuilder`1.GetEnumerator">
            <summary>
            to get the enumerator of the column
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropdownColumnBuilder`1.Item(System.Int32)">
            <summary>
            Used to get the column of scpecified index
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.MultiColumnDropDownModel`1">
            <summary>
            GenericDropDownModel class
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropDownModel`1.AllowSorting">
            <summary>
            gets or sets the AllowSorting property which specifies the scrolling need in multicolumndropdown
            </summary> 
            <remarks>
            To restrict the grid Sorting the multicolumn drop down, we must set AllowScrolling property as true
            </remarks>
            <example>
            MultiColumnDropDownModel Mymodel = new MultiColumnDropDownModel()
            Mymodel.AllowSorting= true;
            </example>
            <value><c>true</c> if [allow sorting]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropDownModel`1.AllowScrolling">
            <summary>
            gets or sets the AllowScrolling property which specifies the scrolling need in multicolumndropdown
            </summary> 
            <remarks>
            To restrict the Grid width and height in the multicolumn drop down, we must set AllowScrolling property as true
            </remarks>
            <example>
            MultiColumnDropDownModel Mymodel = new MultiColumnDropDownModel()
            Mymodel.AllowScrolling = true;
            </example>
            <value><c>true</c> if [allow scrolling]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropDownModel`1.MozillaLayoutScrollbarSide">
            <summary>
            Specifies the side of vertical scrollbar in mozilla. It will affect only in RTL Mode.(Default is LayoutScrollbarSide.Right)
            </summary>        
            <remarks>
            If your mozilla Scrollbars side configuration is 1 then you should set MozillaLayoutScrollbarSide to LayoutScrollbarSide.Left. if Config is 0, then MozillaLayoutScrollbarSide should be LayoutScrollbarSide.Right
            to change the Layout of mozilla browser, goto utl about:config in mozilla, type layout.scrollbar.side and change the integer to 0/1/2/3. 
            For RTL mode 0 and 1 suits. 0 is for right side scrollbar and 1 is for left side scrollbar.
            </remarks>
            <example>
            MultiColumnDropDownModel Mymodel = new MultiColumnDropDownModel()
            Mymodel.MozillaLayoutScrollbarSide = LayoutScrollbarSide.Left;
            </example>
            <value>The mozilla layout scrollbar side.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropDownModel`1.ActionMode">
            <summary>
            Gets or sets Action Mode of the <b>MultiDropDown </b>control
            </summary>
            <remarks>
            <b>ActionMode</b> property specifies the operation mode of the <b>Grid</b>
            Control
            </remarks>
            <value>
            String represents whether Server mode or JSON mode. Default mode is Server.
            </value>
            <example>
            The following example demonstrates how to use <b>ActionMode</b> property to JSON
            Mode.
            <code lang="C#">MultiDropDownModel<typeparam name="T"></typeparam> myModel = new MultiDropDownModel<typeparam name="T"></typeparam>();
             myModel.ActionMode="JSON";</code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Mvc.Grid.MultiColumnDropDownModel`1.Localize" -->
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropDownModel`1.LocalizationPath">
            <summary>
            Gets or sets the resource location.
            </summary>
            <value>The resource location.</value>
            <example>
            The following example shows how to use the <b>Localize </b>property
            <para></para>
            <code lang="C#">MultiDropDownModel<typeparam name="T"></typeparam> myModel = new MultiDropDownModel<typeparam name="T"></typeparam>();
             myModel.LocalizationPath="~/App_LocalResources";</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.MultiColumnDropDownModel`1.CustomCss">
            <summary>
            Gets or sets <b>CustomCss</b> which is applied for the Grid
            </summary>
            <remarks>
            Css Class Applied for the <b>MultiColumnDropDown</b> control.
            </remarks>
            <value>
            A string that represents the Name of the Css class applied for the <b>Grid</b>
            control.
            </value>
            <example>
            The following code example demonstrates how to use the <b>CustomCss</b> property  
            <para></para>
            <code lang="C#">MultiDropDownModel<typeparam name="T"></typeparam> myModel = new MultiDropDownModel<typeparam name="T"></typeparam>();
            myModel.CustomCss = &quot;MyOffice&quot;;</code>
            </example> 
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IPagerBuilder.PagerStyle(Syncfusion.Mvc.Grid.PagerStyle)">
            <summary>
            Specifies the Pager Style 
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IPagerBuilder.PagerPosition(Syncfusion.Mvc.Grid.Position)">
            <summary>
            Specifies the position of the pager
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IPagerBuilder.SliderWidth(System.Double)">
            <summary>
            Specifies the width of the slider when slider pager is enabled. 
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IPagerBuilder.ShowPagerInformation(System.Boolean)">
            <summary>
            Specifies whether the pager information is displayed or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IPagerBuilder.TextboxWidth(System.Double)">
            <summary>
            Specifies the width of the slider when slider pager is enabled. 
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PageSettings.pageSize">
            <summary>
            Specifies the default Page Size 
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PageSettings.currentPage">
            <summary>
            Specifies the default Current Page Number
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PageSettings.pagerStyle">
            <summary>
            Specifies the Pager Style 
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PageSettings.pagerPosition">
            <summary>
            Specifies the position of the pager 
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PageSettings.sliderWidth">
            <summary>
            Specifies the width of the slider in slider pager
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PageSettings.showInfo">
            <summary>
            Specifies whether the pager information is displayed or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PageSettings.textboxWidth">
            <summary>
            Specifies the width of the textbox in manual pager
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.PageSettings.pageCount">
            <summary>
            Specifies the default vaule of the PageCount
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.PageSettings.PagerStyle">
            <summary>
            Specifies the PagerStyle
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.PageSettings.PagerPosition">
            <summary>
            Specifies the position of the pager 
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.PageSettings.SliderWidth">
            <summary>
            Specifies the width of the slider when slider pager is enabled. 
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.PageSettings.ShowPagerInformation">
            <summary>
            Specifies whether the pager information is displayed or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.PageSettings.TextboxWidth">
            <summary>
            Specifies the width of the slider when slider pager is enabled. 
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.PageSettings.CurrentPage">
            <summary>
            Gets or Sets the CurrentPage
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.PageSettings.CurrentIndex">
            <summary>
            Gets or sets the CurrentIndex
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ScrollerSettings.AllowVirtualScrolling">
            <summary>
            Gets or sets the whether the virtual scrolling is true or not.
            </summary>
            <value>True if virtual scrolling is needed false if normal scrolling is not needed</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ScrollerSettings.VirtualScrollMode">
            <summary>
            Gets or sets the Mode of Virtual Scrolling
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridSortingColumnBuilder`1.Add(Syncfusion.Mvc.Grid.SortDescriptor)">
             <summary>
             Add single sortdescriptor to the Grid Model
             </summary>
             <param name="descriptor">SortDescriptor</param>
             <returns>IGridSortingColumnBuilder</returns>
             <example>
             [View] 
             <para></para>
             <code lang="ASPX"><code><pre> &lt;%=Html.Grid&lt;Order&gt;("Grid1")
               .Datasource(Model)
            .Caption("Orders")
            .Sorting(f =&gt;
             {
                f.AllowSorting(true);
                 f.SortDescriptors(d =&gt;
                 {
                     d.Add((SortDescriptor)ViewData["descriptor"]);
                  });
              })
             %&gt;</pre></code>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IGridSortingColumnBuilder`1.Add(System.Collections.Generic.IEnumerable{Syncfusion.Mvc.Grid.SortDescriptor})">
             <summary>
             Add list of sortdescriptor to the Grid Model
             </summary>
             <param name="descriptor">SortDescriptor</param>
             <returns>IGridSortingColumnBuilder</returns>
             <example>
             [View] 
             <para></para>
             <code lang="ASPX"><code><pre> &lt;%=Html.Grid&lt;Order&gt;("Grid1")
               .Datasource(Model)
            .Caption("Orders")
            .Sorting(f =&gt;
             {
                f.AllowSorting(true);
                 f.SortDescriptors(d =&gt;
                 {
                     d.Add((IEnumerable&lt;SortDescriptor&gt;ViewData["descriptors"]);
                  });
              })
             %&gt;</pre></code>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IToolBarBuilder.Add(System.String,System.String,System.String)">
            <summary>
            Provides methods for adding custom toolbar item
            </summary>
            <param name="customItemTitle">specifies the title for the custom toolbar item. </param>
            <param name="customItemCaption">specifies the caption for the custom toolbar item type</param>
            <param name="customItemCssClass">Custom item appearance can be customized by specifying the Css class</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IToolBarBuilder.Add(System.String,System.String)">
            <summary>
            Provides methods for adding custom toolbar item
            </summary>
            <param name="customItemTitle">specifies the title for the custom toolbar item. </param>
            <param name="customItemCssClass">Custom item appearance can be customized by specifying the Css class</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IToolBarBuilder.ClearAll">
            <summary>
            Clear all the toolbar item collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ToolbarOptions.Mapper">
            <summary>
            gets or sets for the ExcelExport ToolbarItem
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ToolbarOptions.Caption">
            <summary>
            gets or sets the caption for the toolbar item        
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ToolbarOptions.Title">
            <summary>
            gets or sets the title for the toolbar item      
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ToolbarOptions.CssClass">
            <summary>
            gets or sets the CssClass for the custom toolbar item
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.ToolbarOptions.ItemType">
            <summary>
            gets or sets the item type for the toolbar       
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridSummaryColumnDescriptor.ConsiderNullAsZero">
            <summary>
            Gets or sets a value indicating whether to consider null as zero while calculating Average.
            </summary>
            <value>
              <c>true</c> if [consider null as zero]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridSummaryColumnDescriptorCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridSummaryColumnDescriptorCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridSummaryColumnDescriptorCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridSummaryRowDescriptorCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridSummaryRowDescriptorCollectionEnumerator.#ctor(Syncfusion.Mvc.Grid.GridSummaryRowDescriptorCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="parentCollection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridSummaryRowDescriptorCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridSummaryRowDescriptorCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridSummaryRowDescriptorCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridSummaryRow`1">
            <summary>
             Represents the GridSummary Row element in the Grid
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridSummaryRow`1.#ctor(Syncfusion.Mvc.Grid.GridSummaryRowDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Mvc.Grid.GridSummaryRow`1"/> class.
            </summary>
            <param name="summaryRow">The summary row.</param>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.GridSummaryRow`1.nodeType">
            <summary>
            Stores the node type 
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridSummaryRow`1.SummaryRow">
            <summary>
            Gets or sets the Summary row descriptor
            </summary>
            <value>The summary row.</value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.FilterDescriptor">
            <summary>
            Define the FilterDescriptor setting for the Grid control
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.FilterDescriptor.ColumnName">
            <summary>
            Gets or sets the type of column Name.
            </summary>
            <value>the filtercolumn Name.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.FilterDescriptor.Operator">
            <summary>
            Gets or sets the type of the filter.
            </summary>
            <value>The type of the filter.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.FilterDescriptor.Value">
            <summary>
            Gets or sets the filter value.
            </summary>
            <value>The filter value.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.FilterDescriptor.Predicate">
            <summary>
            Gets or sets the type of the predicate.
            </summary>
            <value>The type of the predicate.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.FilterDescriptor.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether this instance is case sensitive.
            </summary>
            <value>
            	<c>true</c> if this instance is case sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridConditionalFormatDescriptor`1">
            <summary>
            Define the conditional format setting for the Grid control
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridConditionalFormatDescriptor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:GridConditionalFormatDescriptor"/> class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Mvc.Grid.GridConditionalFormatDescriptor`1.InitializeFrom(Syncfusion.Mvc.Grid.GridConditionalFormatDescriptor{`0})" -->
        <member name="P:Syncfusion.Mvc.Grid.GridConditionalFormatDescriptor`1.Conditions">
            <summary>
            Gets or sets the conditions.
            </summary>
            <value>The conditions.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridConditionalFormatDescriptor`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridConditionalFormatDescriptor`1.ApplyStyleToColumn">
            <summary>
            Gets or sets the apply style to column name specified.
            </summary>
            <value>The apply style to column.</value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.GridDataCondition`1">
            <summary>
            Define the condition settings for the Grid to apply.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridDataCondition`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:GridDataCondition"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridDataCondition`1.ExpressionToName(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Grabs the property name from a member expression.
            </summary>
            <param name="expression">The expression</param>
            <returns>The name of the property</returns>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridDataCondition`1.ConditionType">
            <summary>
            Gets or sets the type of the condition.
            </summary>
            <value>The type of the condition.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridDataCondition`1.PredicateType">
            <summary>
            Gets or sets the type of the predicate.
            </summary>
            <value>The type of the predicate.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridDataCondition`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridDataCondition`1.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.SortDescriptor">
            <summary>
            Define the Sort descriptor setting for the Grid control
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.SortDescriptor.ColumnName">
            <summary>
            Gets or sets the type of column Name.
            </summary>
            <value>the sortColumn Name.</value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.SortDescriptor.SortDirection">
            <summary>
            Gets or sets the sort direction for this sort descriptor. 
            </summary>
            <value>The sort direction</value>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.ConverterOptionsExt.All">
            <summary>
            All the content would be exported.
            </summary>
        </member>
        <member name="F:Syncfusion.Mvc.Grid.ConverterOptionsExt.Visible">
            <summary>
            Only the visible elements would be exported.
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridExcelExportActionResult`1.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Used to write the result in the context
            </summary>
            <remarks>
            Used to Write the result in Httpcontext during the callbacks.
            </remarks>
            <param name="context">context encapsulates the information about Http
            Request</param>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridExcelExportActionResult`1.GetColumnCount(System.Collections.Generic.IEnumerable{Syncfusion.Mvc.Grid.GridColumn{`0}})">
            <summary>
            Gets the column count.
            </summary>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridExcelExportActionResult`1.IsTemplateColumnExt">
            <summary>
            Gets or sets a value indicating whether the template column exported.
            </summary>
            <value>
            	<c>true</c> if the template column is exported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridExcelExportActionResult`1.IsVisibleColumnExt">
            <summary>
            Gets or sets a value indicating whether this instance is visible column export.
            </summary>
            <value>
            	<c>true</c> if this instance is visible column ext; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.ExpressionExtension`1.ExpressionToName(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Grabs the property name from a member expression.
            </summary>
            <param name="expression">The expression</param>
            <returns>The name of the property</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridExtensions.Grid``1(Syncfusion.Mvc.Shared.ComponentFactory,System.String,Syncfusion.Mvc.Grid.GridPropertiesModel{``0})">
            <summary>
            Extetension method of a HtmlHelper. Initially Grid is Generated by this method
            </summary>
            <remarks>
            Used  to Render the Grid.
            </remarks>
            <param name="html">Extension for html</param>
            <param name="id">Id of the Mvc grid</param>
            <param name="gridModel">Contains all the properties of the Grid</param>
            <example>
            The following exmaple demonstrates how to use  <b>Grid</b> method 
            <para></para>
            <code> &lt;%Html.Syncfusion().Grid(&quot;MvcGridServerMode&quot;,
             new GridModelProperties()
                        {
                            DataSource = SqlCE.Orders.Skip(0).Take(30),
                            SkinName = &quot;Syncfusion-Grid-Office2007Black&quot;,
                            ActionMode = &quot;Server&quot;,
                            Caption = &quot;Orders&quot;
                        };
            );%&gt;</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridExtensions.Grid``1(Syncfusion.Mvc.Shared.ComponentFactory,System.String,System.String,System.Action{Syncfusion.Mvc.Grid.IRootGridColumnBuilder{``0}})">
            <summary>
            Initially Grid is Generated by this method
            </summary>
            <remarks>
            Generates  <b>Grid</b> Using column expressions. User can specify their own
            ordering of columns displayed in the <b>Grid</b>.
            </remarks>
            <typeparam name="T">Type of the Object</typeparam>
            <param name="html">Extension method name</param>
            <param name="id">Id of the Grid</param>
            <param name="viewDataKey">View data key used to retrive the GridModel
            object</param>
            <param name="columns">collection of columns Generated by lamda expression to be
            added in visible columns collection</param>
            <returns>
            <see cref="!:null">Void</see>
            </returns>
            <example>
            The following exmaple demonstrates how to use  <b>Grid</b> method. 
            <para></para>
            <para> <c>&lt;%Html.Syncfusion().Grid&lt;MvcSampleBrowser.Models.Orders&gt;(</c></para>
            <code>             "MvcGridServerMode","GridModel" ,
                        column =&gt;{
                      column.Add(p =&gt; p.CustomerID);
                      column.Add(p =&gt; p.EmployeeID);
                      column.Add(p =&gt; p.OrderID);
                      column.Add(P =&gt; P.ShipCountry);
                      column.Add(p =&gt; p.ShipName);
                      column.Add(p =&gt; p.OrderDate);
                  }); %&gt;</code>
            <para> </para>
            </example>  
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridExtensions.Grid``1(Syncfusion.Mvc.Shared.ComponentFactory,System.String)">
            <summary>
            Extetension method of a HtmlHelper. Initially Grid is Generated by this method
            </summary>
            <remarks>
            Used  to Render the Grid.
            </remarks>
            <param name="html">Extension for html</param>
            <param name="id">Id of the Mvc grid</param>
            <param name="gridModel">Contains all the properties of the Grid</param>
            <returns>Grid Builder object</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.GridExtensions.CreateColumnBuilder``1(System.Action{Syncfusion.Mvc.Grid.IRootGridColumnBuilder{``0}},Syncfusion.Mvc.Grid.Grid{``0})">
            <summary>
            Used to create GridcolumnBuilder class and adding all columns in GridColumn object.
            </summary>
            <typeparam name="T">Type of the Data source</typeparam>
            <param name="columns">Function Delegate </param>
            <param name="g">Grid object</param>
            <returns>Grid ColumnBuilder object</returns>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.KeyConfigurator">
            <summary>
            KeyCOnfigurator is the class which is used to set different shortcuts for all operations
            Using Keys Enumerable you can set the shortcut to operations such as FocusKey, FirstCellSelection, FirstRowSelection etc
            if one or more grid is there set different shortcuts to focuskey for both the grids.
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Many actions with Keys datatype
            </value>
            <example>
            The following example demonstrates how to use <b>KeyConfigurator</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.FocusKey = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.ShowAlert">
            <summary>
            Gets or sets whether the Configuration Alert is needed or not
            </summary>
            <value>boolean</value>
            <remarks>By Default, it is true</remarks>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.SaveRequest">
            <summary>
            Gets or sets the shortcut key for the SaveRequest Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>SaveRequest</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.SaveRequest = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.CancelRequest">
            <summary>
            Gets or sets the shortcut key for the CancelRequest Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>SaveRequest</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.CancelRequest = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.FocusKey">
            <summary>
            Gets or sets the shortcut key for the Focus Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>FocusKey</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.FocusKey = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.FirstCellSelection">
            <summary>
            Gets or sets the shortcut key for the FirstCellSelection Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>FirstCellSelection</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.FirstCellSelection = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.LastCellSelection">
            <summary>
            Gets or sets the shortcut key for the LastCellSelection Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>LastCellSelection</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.LastCellSelection = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.LastRowSelection">
            <summary>
            Gets or sets the shortcut key for the LastRowSelection Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>LastRowSelection</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.LastRowSelection = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.FirstRowSelection">
            <summary>
            Gets or sets the shortcut key for the FirstRowSelection Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>FirstRowSelection</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.FirstRowSelection = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.InsertRecord">
            <summary>
            Gets or sets the shortcut key for the InsertRecord Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>InsertRecord</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.InsertRecord = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.DeleteRecord">
            <summary>
            Gets or sets the shortcut key for the DeleteRecord Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>DeleteRecord</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.DeleteRecord = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.EditRecord">
            <summary>
            Gets or sets the shortcut key for the EditRecord Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>EditRecord</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.EditRecord = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.ExportToExcel">
            <summary>
            Gets or sets the shortcut key for the ExportToExcel Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>ExportToExcel</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.ExportToExcel = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.ExportToWord">
            <summary>
            Gets or sets the shortcut key for the ExportToWord Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>ExportToWord</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.ExportToPDF = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.ExportToPDF">
            <summary>
            Gets or sets the shortcut key for the ExportToPDf Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>ExportToPDF</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.ExportToPDF = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.NextPage">
            <summary>
            Gets or sets the shortcut key for the NextPage Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>NextPage</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.NextPage = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.PreviousPage">
            <summary>
            Gets or sets the shortcut key for the PreviousPage Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>PreviousPage</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.PreviousPage = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.LastPage">
            <summary>
            Gets or sets the shortcut key for the LastPage Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>LastPage</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.LastPage = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.NextPager">
            <summary>
            Gets or sets the shortcut key for the NextPager Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>NextPager</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.NextPager = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.PreviousPager">
            <summary>
            Gets or sets the shortcut key for the PreviousPager Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>PreviousPager</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.PreviousPager = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.FirstPage">
            <summary>
            Gets or sets the shortcut key for the FirstPage Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>FirstPage</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.FirstPage = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.SelectedGroupExpand">
            <summary>
            Gets or sets the shortcut key for the SelectedGroupExpand Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>SelectedGroupExpand</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.SelectedGroupExpand = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.TotalGroupExpand">
            <summary>
            Gets or sets the shortcut key for the TotalGroupExpand Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>TotalGroupExpand</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.TotalGroupExpand = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.SelectedGroupCollapse">
            <summary>
            Gets or sets the shortcut key for the SelectedGroupCollapse Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>SelectedGroupCollapse</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.SelectedGroupCollapse = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.KeyConfigurator.TotalGroupCollapse">
            <summary>
            Gets or sets the shortcut key for the TotalGroupCollapse Action
            </summary>
            <remarks>
            you can also assign new keyConfigurator object to the property of GridPropertiesmodel
            </remarks>
            <value>
            Keys
            </value>
            <example>
            The following example demonstrates how to use <b>TotalGroupCollapse</b> property.
            <para></para>
            <code lang="C#">GridPropertiesModel gridModel = new GridPropertiesModel();
            gridModel.KeyConfigurator.TotalGroupCollapse = &quot;Keys.AltPlusA&quot;;</code>
            </example>
        </member>
        <member name="T:Syncfusion.Mvc.Grid.IEnumerableExtensions">
            <summary>
            Contains Extension methods
            </summary>
            <remarks>
            Contains IEnumerable Extension methods used to display the Grid in call backs.
            </remarks>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.GridActions``1(System.Collections.IEnumerable)">
            <summary>
            Html Action result
            </summary>
            <remarks>
            Used to Generate Grid in Callbacks.
            </remarks>
            <typeparam name="T">Type of the object</typeparam>
            <param name="dataSource">Data source object</param>
            <returns>
            Html Action Result
            </returns>
            <example>
            The following example demonstrates how to use this method.
            <para></para>
            <code lang="C#">IEnumerable data = new StudentDataContext().Student;
            return data.GridActions&lt;GridHtmlActionResult&gt;();</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.GridJSONActions``1(System.Collections.IEnumerable)">
            <summary>
            Used in JSON mode 
            Grid is Accessed by this method        
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="dataSource">Data source object</param>
            <returns>JSON Action Result</returns>
            <example>
            The following example demonstrates how to use this method.
            <para></para>
            <code lang="C#">IEnumerable data = new StudentDataContext().Student;
            return data.GridActions&lt;GridJSONActionResult&gt;();</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.GridActions``1(System.Collections.IEnumerable,System.Int64)">
            <summary>
            Html Action result
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="dataSource">Data source object</param>
            <param name="totalRecordCount">total record count for gridpropertymodel</param>        
            <returns>
            Html Action Result
            </returns>
            <example>
            The following example demonstrates how to use this method. 
            <para></para>
            <code lang="C#">IEnumerable data = new StudentDataContext().Student;
            return data.GridActions&lt;Studentt&gt;(200);</code>
            </example>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.GridExportToExcel``1(System.Collections.IEnumerable,System.String,Syncfusion.XlsIO.ExcelVersion)">
            <summary>
            Extension method for GridModel used for export the entire grid Cell data to excel sheet
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="datasource">Data source object</param>
            <param name="fileName">Name of the file for Save the information</param>
            <param name="excelVersion">Version of the Excel Sheet</param>
            <returns>Excel file</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.GridExportToExcel``1(System.Collections.IEnumerable,System.String,Syncfusion.XlsIO.ExcelVersion,Syncfusion.Mvc.Grid.ConverterOptionsExt,System.Boolean)">
            <summary>
            Grids the export to excel.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="datasource">The datasource.</param>
            <param name="fileName">Name of the file.</param>
            <param name="excelVersion">The excel version.</param>
            <param name="excelExportOption">The excel export option.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.GridExportToExcel``1(System.Collections.IEnumerable,System.String,Syncfusion.XlsIO.ExcelVersion,Syncfusion.Mvc.Grid.ConverterOptionsExt,System.Boolean,System.Boolean)">
            <summary>
            Grids the export to excel.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="datasource">The datasource.</param>
            <param name="fileName">Name of the file.</param>
            <param name="excelVersion">The excel version.</param>
            <param name="excelExportOption">The excel export option.</param>
            <param name="isTempColumnExport">if set to <c>true</c> [is temp column export].</param>
            <param name="isVisibleColumnExt">if set to <c>true</c> [is visible column ext].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.GridExportToWord``1(System.Collections.IEnumerable,System.String,Syncfusion.DocIO.DLS.DocumentVersion)">
            <summary>
            Extension method for GridModel used for export the entire grid cell data to word format
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="datasource">Data source object</param>
            <param name="fileName">Name of the file for Save the information</param>
            <param name="wordVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.GridExportToWord``1(System.Collections.IEnumerable,System.String,Syncfusion.DocIO.DLS.DocumentVersion,Syncfusion.Mvc.Grid.ConverterOptionsExt,System.Boolean)">
            <summary>
            Grids the export to word.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="datasource">The datasource.</param>
            <param name="fileName">Name of the file.</param>
            <param name="wordVersion">The word version.</param>
            <param name="wordExportOption">The word export option.</param>
            <param name="isTempColumnExport">if set to <c>true</c> [is temp column export].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.GridExportToWord``1(System.Collections.IEnumerable,System.String,Syncfusion.DocIO.DLS.DocumentVersion,Syncfusion.Mvc.Grid.ConverterOptionsExt,System.Boolean,System.Boolean)">
            <summary>
            Grids the export to word.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="datasource">The datasource.</param>
            <param name="fileName">Name of the file.</param>
            <param name="wordVersion">The word version.</param>
            <param name="wordExportOption">The word export option.</param>
            <param name="isTempColumnExport">if set to <c>true</c> [is temp column export].</param>
            <param name="isVisibleColumnExt">if set to <c>true</c> [is visible column ext].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.GridExportToPDF``1(System.Collections.IEnumerable,System.String,Syncfusion.Pdf.PdfVersion,Syncfusion.Mvc.Grid.ConverterOptionsExt)">
            <summary>
            Extension method for GridModel used for export the entire grid cell data to Pdf format
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="datasource">Data source object</param>
            <param name="fileName">Name of the file for Save the information</param>
            <param name="pdfVersion"></param>
            <param name="pdfExportOption"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.GridExportToPDF``1(System.Collections.IEnumerable,System.String,Syncfusion.Pdf.PdfVersion,Syncfusion.Mvc.Grid.ConverterOptionsExt,System.Boolean)">
            <summary>
            Grids the export to PDF.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="datasource">The datasource.</param>
            <param name="fileName">Name of the file.</param>
            <param name="pdfVersion">The PDF version.</param>
            <param name="pdfExportOption">The PDF export option.</param>
            <param name="isTempColumnExport">if set to <c>true</c> [is temp column export].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.GridExportToPDF``1(System.Collections.IEnumerable,System.String,Syncfusion.Pdf.PdfVersion,Syncfusion.Mvc.Grid.ConverterOptionsExt,System.Boolean,System.Boolean)">
            <summary>
            Grids the export to PDF.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="datasource">The datasource.</param>
            <param name="fileName">Name of the file.</param>
            <param name="pdfVersion">The PDF version.</param>
            <param name="pdfExportOption">The PDF export option.</param>
            <param name="isTempColumnExport">if set to <c>true</c> [is temp column export].</param>
            <param name="isVisibleColumnExt">if set to <c>true</c> [is visible column ext].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.GridExportToExcel``1(System.Collections.IEnumerable)">
            <summary>
            Extension method for GridModel used for export the entire grid Cell data to excel sheet
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="datasource">Data source object</param>
            <returns>Excel file</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.GridExportToWord``1(System.Collections.IEnumerable)">
            <summary>
            Extension method for GridModel used for export the entire grid cell data to Word format
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="datasource">Data source object</param>
            <returns>Word file</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.GridExportToPDF``1(System.Collections.IEnumerable)">
            <summary>
            Extension method for GridModel used for export the entire grid cell data to Pdf format
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="datasource">Data source object</param>
            <returns>Pdf file</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.Field(System.Object,System.String)">
            <summary>
            Values of the given field is returned
            </summary>
            <remarks>
            Object Extesion method, accessed by using datasource object and returns the
            value of the passed property.
            </remarks>
            <param name="source">data source object</param>
            <param name="propertyName">name of the column in that object</param>
            <returns>
            value of the property
            </returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IEnumerableExtensions.IsNullOrEmpty(System.Object)">
            <summary>
            Indicates whether the specified object is null or an empty string
            </summary>
            <param name="value">The object to test</param>
            <returns>true if the value parameter is null or an empty string (""); otherwise, false</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IQueryableExtentions.Sort(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{Syncfusion.Mvc.Grid.SortDescriptor})">
            <summary>
            Performs the sorting action on specified colums
            </summary>
            <param name="datasource">IQueryable datasource</param>
            <param name="sortdescriptors">SortDescriptors collection</param>
            <returns>IQueryable datasource</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IQueryableExtentions.DoSortColumns(System.Linq.IQueryable,System.String[],System.String[])">
            <summary>
            Performs the sorting action on specified colums
            </summary>
            <param name="dataSource">IQueryable datasource</param>
            <param name="sortedCols">SortedColumn collection</param>
            <param name="sortDirec">SortedColumn Direction collection</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IQueryableExtentions.CountSummary(System.Linq.IQueryable)">
            <summary>
            Counts non-null entries. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IQueryableExtentions.DoubleAggregateSummary(System.Linq.IQueryable,System.String,System.Boolean)">
            <summary>
            Summarizes System.Double fields. Provides Count, Minimum, Maximum, Sum, and Average.
            </summary>
            <param name="columnName">Column Name</param>
            <returns>DoubleAggregatesummary object </returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IQueryableExtentions.Int32AggregateSummary(System.Linq.IQueryable,System.String,System.Boolean)">
            <summary>
            Int32s the aggregate summary.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.IQueryableExtentions.BooleanAggregateSummary(System.Linq.IQueryable,System.String)">
            <summary>
            Summarizes Boolean fields. Provides Count, TrueCount, and FalseCount.
            </summary>
            <param name="columnName">column Name</param>
            <returns>BooleanAggregateSummary object</returns>
        </member>
        <member name="T:Syncfusion.Mvc.Shared.GenericDropDownExtension">
            <summary>
             GenericDropDown Extensions
            </summary>
        </member>
        <member name="M:Syncfusion.Mvc.Shared.GenericDropDownExtension.MultiColumnDropDown``1(Syncfusion.Mvc.Shared.ComponentFactory,System.String,System.String,System.Action{Syncfusion.Mvc.Grid.IRootMultiColumnDropDownColumnBuilder{``0}})">
            <summary>
            Initially Grid is Generated by this method
            </summary>
            <remarks>
            Generates  <b>Grid</b> Using column expressions. User can specify their own
            ordering of columns displayed in the <b>Grid</b>.
            </remarks>
            <typeparam name="T">Type of the Object</typeparam>
            <param name="html">Extension method name</param>
            <param name="id">Id of the Grid</param>
            <param name="viewDataKey">View data key used to retrive the GridModel
            object</param>
            <param name="columns">collection of columns Generated by lamda expression to be
            added in visible columns collection</param>
            <returns>
            <see cref="!:null">Void</see>
            </returns>
            <example>
            The following exmaple demonstrates how to use  <b>Grid</b> method. 
            <para></para>
            <para> <c>&lt;%Html.MultiColumnDropDown&lt;MvcSampleBrowser.Models.Orders&gt;(</c></para>
            <code>             "MvcGridServerMode","GridModel" ,
                        column =&gt;{
                      column.Add(p =&gt; p.CustomerID);
                      column.Add(p =&gt; p.EmployeeID);
                      column.Add(p =&gt; p.OrderID);
                      column.Add(P =&gt; P.ShipCountry);
                      column.Add(p =&gt; p.ShipName);
                      column.Add(p =&gt; p.OrderDate);
                  }); %&gt;</code>
            <para> </para>
            </example>  
        </member>
        <member name="M:Syncfusion.Mvc.Shared.GenericDropDownExtension.CreateColumnBuilder``1(System.Action{Syncfusion.Mvc.Grid.IRootMultiColumnDropDownColumnBuilder{``0}},Syncfusion.Mvc.Grid.MultiColumnDropDownModel{``0})">
            <summary>
            Used to create GridcolumnBuilder class and adding all columns in GridColumn object.
            </summary>
            <typeparam name="T">Type of the Data source</typeparam>
            <param name="columns">Function Delegate </param>
            <param name="g">Grid object</param>
            <returns>Grid ColumnBuilder object</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.PropertyDescriptorExtensions.GetPropertyDescriptor(System.ComponentModel.PropertyDescriptorCollection,System.String)">
            <summary>
            Generate the Property Descriptor for corresponding Property it may be simple or complex property
            </summary>
            <param name="pdc"></param>
            <param name="columnName"></param>
            <param name="columnType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.PropertyDescriptorExtensions.GetPropertyDescriptors(System.Collections.IEnumerable)">
            <summary>
            Gets the property descriptors for the corresponding IEnumerable data source        
            </summary>
            <param name="source">The source.</param>
            <returns>The PropertyDescriptorCollection</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.StringExtensions.FormatByName(System.String,System.Object)">
            <summary>
            Formats the given object as specified the  format
            </summary>
            <param name="format">String object for extension</param>
            <param name="arg">object contains the value to be formatted</param>
            <returns>Value of the object in after formatting is applied</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.StringExtensions.FormatByName(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Used for doing formatting
            </summary>
            <param name="format">String object for extension</param>
            <param name="values">Key value pairs</param>
            <returns>Value of the object in after formatting is applied</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.StringExtensions.FormatByName(System.String,System.IFormatProvider,System.Object)">
            <summary>
            Used for doing formatting
            </summary>
            <param name="format">String object for extension</param>
            <param name="provider">Provides a mechanism for retrieving an object to control formatting</param>
            <param name="arg">object contains the value to be formatted</param>
            <returns>Value of the object in after formatting is applied</returns>
        </member>
        <member name="M:Syncfusion.Mvc.Grid.StringExtensions.FormatByName(System.String,System.IFormatProvider,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Used for doing formatting
            </summary>
            <param name="format">String object for extension</param>
            <param name="provider">Provides a mechanism for retrieving an object to control formatting</param>
            <param name="values">Key value pair</param>
            <returns>Value of the object in after formatting is applied</returns>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridTableCell`1.HtmlAttributes">
            <summary>
            Gets or sets the htmlattributes for customizing the cell 
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridTableCell`1.Text">
            <summary>
            Gets or sets the text value renders in cell
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridTableCell`1.Data">
            <summary>
            Gets or sets the datasource value of the querycell
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridTableCell`1.Column">
            <summary>
            Gets or sets Column type of the querycell
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridTableCell`1.TableCellType">
            <summary>
            Gets or sets the TableCellType for the querycellInfo
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridTableRow`1.HtmlAttributes">
            <summary>
            Gets or sets the htmlattributes for customizing the cell 
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridTableRow`1.Data">
            <summary>
            Gets or sets the datasource value of the querycell
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridTableRow`1.IsAlternate">
            <summary>
            Indicates whether the record row  is an alternating row
            </summary>
        </member>
        <member name="P:Syncfusion.Mvc.Grid.GridTableRow`1.Expanded">
            <summary>
            set whether child grid needs to expand or not. 
            </summary>
        </member>
    </members>
</doc>
