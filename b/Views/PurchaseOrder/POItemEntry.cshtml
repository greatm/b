@using b.ViewModels;

@model POItem

<tr style="padding-bottom: 15px">
    @using (Html.BeginCollectionItem("POItems"))
    {
        <td>
            <img src="@Url.Content("~/Images/draggable-icon.png")" style="cursor: move" alt="drag"/>
        </td>    

        <td style="width: 100px" class="combo">
            @Html.DropDownList("ProductID", String.Empty)
            @Html.ValidationMessageFor(model => model.ProductID)
        </td>

        <td>
            @Html.EditorFor(model => model.Rate, new {@class="crate" })
            @Html.ValidationMessageFor(model => model.Rate)
        </td>

        <td>
            @Html.EditorFor(model => model.Qty)
            @Html.ValidationMessageFor(model => model.Qty)
        </td>  

        <td>
            @Html.EditorFor(model => model.Amount)
            @Html.ValidationMessageFor(model => model.Amount)
        </td>  

        <td>
            <a href="#" onclick="$(this).parent().parent().remove();">Delete</a>
        </td>
    }
</tr>

<script type="text/javascript">
    $(".combo > select").combobox();
    $(function () {  //  In jQuery 1.6+ this is same as $(document).ready(function(){})
        $('.crate, .cqty')  //  jQuery CSS selector grabs elements with the ID's "quantity" & "item_price"
            .on('change', function (e) {  //  jQuery 1.6+ replcement for .live (dynamically asigns event, see jQuery API)
                //  in this case, our event is "change" which works on inputs and selects to let us know when a value is changed
                //  below i use inline if statements to assure the values i get are "Real"
                var quan = $("#quantity").val() != "" ? parseFloat($("#quantity").val()) : 1,  //  Get quantity value
                    pric = $("#item_price").val() != "" ? parseFloat($("#item_price").val()) : 0;  //  Get price value
                $('#total_price').val(pric * quan); // show total
            });
    });
</script>
