@using b.ViewModels;
@using MvcContrib;
@using MvcContrib.UI;
@using MvcContrib.UI.Grid;
@using MvcContrib.Sorting;

@model Purchase

@{
    ViewBag.Title = "Purchase Create";
}

<h2>Purchase Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Purchase</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.Date)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Date)
            @Html.ValidationMessageFor(model => model.Date)
        </div>

        @*<div class="editor-label">
            @Html.LabelFor(model => model.PurchaseOrders)
        </div>
        <div class="editor-field">
            @Html.DropDownList("PurchaseOrders", String.Empty)
            @Html.ValidationMessageFor(model => model.VendorID)
        </div>*@

        <div class="editor-label">
            @Html.LabelFor(model => model.POID)
        </div>
        <div class="editor-field">
            @Html.DropDownList("POID", String.Empty)
            @Html.ValidationMessageFor(model => model.POID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Vendors)
        </div>
        <div class="editor-field">
            @Html.DropDownList("VendorID", String.Empty)
            @Html.ValidationMessageFor(model => model.VendorID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.VendorInvoice)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.VendorInvoice)
            @Html.ValidationMessageFor(model => model.VendorInvoice)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Remarks)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Remarks)
            @Html.ValidationMessageFor(model => model.Remarks)
        </div>

    </fieldset> 
    
    <fieldset>
        <legend>Purchase Items</legend>

        @if (Model == null || Model.PurchaseItems == null || Model.PurchaseItems.Count() == 0)
        {
            <p>None.</p>
        }
        else
        {
            Html.RenderPartial("PurchaseItemEntry", new PagedPurchaseModel { PageSize = 10, PurchaseItems = Model.PurchaseItems, TotalRows = 10 });
        }



        @*  <ul id="itemEditor" style="list-style-type: none">
            @if (Model != null && Model.PurchaseItems != null)
            {
                foreach (PurchaseItem purchaseItem in Model.PurchaseItems)
                {
                    Html.RenderPartial("PurchaseItemEntry", purchaseItem);
                }
            }
        </ul>
        <a id="addAnother" href="#">Add another</a>*@
        @*    <div>

            @Html.Grid(Model.PurchaseItems).Columns(column =>
       {
           column.For(t => t.ProductID);
           column.For(t => t.Qty);
           column.For(t => t.Rate);
           column.For(t => @Html.ActionLink("Delete", "$(this).parent().remove();"));
       })


        </div>*@

    </fieldset>
    
    <p>
        <input type="submit" value="Create" />
    </p>
   
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    <script type="text/javascript">
        $(function () {
            $("#POID").combobox();
            $("#VendorID").combobox();
            $("#itemEditor").sortable();
            $("#addAnother").click(function () {
                $.get('/PurchaseOrder/POItemEntry', function (template) {
                    $("#itemEditor").append(template);
                });
            });
        });
    </script>
}
